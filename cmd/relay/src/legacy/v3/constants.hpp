#pragma once

#include "net/address.hpp"

namespace legacy
{
  namespace v3
  {
    const size_t FragmentMax  = 255;
    const size_t  FragmentSize = 1024;

    const size_t TokenBytes  = net::Address::ByteSize + 32;
    const size_t HeaderBytes = 1 + TokenBytes + sizeof(uint64_t) + 2;

    const size_t PingKeySize = crypto_auth_KEYBYTES;

    const uint8_t UDPSignKey[] = {
     0x60, 0x45, 0x96, 0x52, 0x4f, 0x1c, 0x00, 0xda, 0x35, 0x1b, 0x6c, 0x17, 0x8b, 0xa8, 0xaa, 0xac,
     0xb4, 0x8c, 0x76, 0xb1, 0x72, 0xa6, 0xfa, 0x7f, 0x52, 0x28, 0xd8, 0x6d, 0x9e, 0x2b, 0x91, 0xec,
    };

    const uint8_t UDPSealKey[] = {
     0x77, 0x9f, 0xf2, 0xeb, 0x45, 0xfb, 0xe8, 0x25, 0x7a, 0xf3, 0x78, 0xf9, 0x26, 0x22, 0x29, 0xc0,
     0xa8, 0xd0, 0x66, 0x92, 0x8b, 0xf9, 0x47, 0xcc, 0x8b, 0x93, 0x62, 0xbe, 0xb3, 0x88, 0xf9, 0x6f,
    };

    const uint8_t InitKey[] = {
     0x91, 0x45, 0x19, 0x24, 0xec, 0xb0, 0x8b, 0xd7, 0xe4, 0xe6, 0xb4, 0x4d, 0xd4, 0x21, 0xab, 0x21, 0x10, 0xc1, 0xf5, 0xfb,
     0x02, 0x26, 0x14, 0xd7, 0x78, 0xb6, 0x2c, 0x83, 0x41, 0x3d, 0x53, 0x07, 0x9a, 0x0c, 0x32, 0xb1, 0xf3, 0x65, 0x82, 0x6e,
     0x2a, 0xe8, 0x33, 0xc3, 0xd2, 0x2b, 0x69, 0x7b, 0x38, 0x79, 0x39, 0x20, 0x7a, 0xc7, 0x03, 0xc8, 0xab, 0xae, 0x9c, 0x94,
     0xf1, 0xac, 0xf0, 0xe3, 0x74, 0xbc, 0x3c, 0xc0, 0x45, 0xeb, 0xfc, 0x81, 0x63, 0xcb, 0xe6, 0xd1, 0x94, 0x2b, 0x90, 0x1f,
     0xc7, 0x96, 0xb8, 0x83, 0xe8, 0xf6, 0x2f, 0x2c, 0x23, 0x0b, 0x23, 0x0d, 0xaf, 0x7c, 0x26, 0xee, 0x2c, 0x4a, 0xee, 0x46,
     0xa0, 0xf6, 0xb8, 0xe4, 0x34, 0xfa, 0xc8, 0x7b, 0x9a, 0x52, 0x06, 0xd8, 0x35, 0x0c, 0x2f, 0x53, 0x2b, 0xab, 0x41, 0x17,
     0x04, 0xfb, 0x87, 0xb6, 0xeb, 0xa3, 0x2d, 0xf5, 0x57, 0xac, 0x22, 0xb0, 0x49, 0x0f, 0x96, 0xdf, 0xda, 0xa6, 0x7a, 0x97,
     0x0c, 0x47, 0x18, 0x61, 0x45, 0xda, 0x3e, 0x23, 0x3d, 0x58, 0xe4, 0xe1, 0x5e, 0x2a, 0x27, 0x51, 0xc1, 0xc0, 0x93, 0x1b,
     0x4f, 0x8b, 0x98, 0x7c, 0x13, 0x71, 0xdf, 0xbb, 0x97, 0x3a, 0x11, 0xd3, 0x3b, 0x84, 0xba, 0x31, 0xc3, 0x21, 0x53, 0xb9,
     0x37, 0x9d, 0x1e, 0x19, 0x94, 0xf3, 0x44, 0x3b, 0x34, 0x88, 0x52, 0x99, 0x9b, 0x02, 0x22, 0x73, 0x04, 0x0c, 0xf1, 0xcb,
     0xe5, 0xad, 0x6f, 0xa2, 0xee, 0x7d, 0xa9, 0xce, 0xdd, 0x4d, 0x16, 0xae, 0x59, 0x2c, 0x05, 0xa1, 0x68, 0xde, 0xa4, 0x24,
     0x31, 0xcd, 0x6d, 0xeb, 0x94, 0xc2, 0xef, 0x7a, 0xa2, 0xee, 0x6d, 0xc1, 0x96, 0x2c, 0x45, 0xf9, 0x00, 0xf3, 0x69, 0x8e,
     0x83, 0x55, 0x31, 0xd2, 0x14, 0xb2, 0x47, 0xee, 0x10, 0x08, 0x60, 0xe4, 0x41, 0x6d, 0xb2, 0x10,
    };

    enum class ResponseState {
      Invalid,
      Init,
      Config,
      Update,
    };
  }  // namespace v3
}  // namespace legacy