-- create role engineering login createdb createrole;
-- create role customer login;
-- create role operations login;
-- create role johnnyb;
-- grant engineering to johnnyb;
-- create database nn owner=engineering
-- \c nn
drop table if exists relays;

drop table if exists datacenter_maps;

drop table if exists buyers;

drop table if exists customers;

drop table if exists relay_states;

drop table if exists machine_types;

drop table if exists bw_billing_rules;

drop table if exists multipath_veto_users;

drop table if exists banned_users;

drop table if exists route_shaders;

drop table if exists rs_internal_configs;

drop table if exists datacenters;

drop table if exists sellers;

drop table if exists metadata;

create table relay_states (
  id integer not null,
  name varchar not null,
  primary key (id)
);

create table machine_types (
  id integer not null,
  name varchar not null,
  primary key (id)
);

create table bw_billing_rules (
  id integer not null,
  name varchar not null,
  primary key (id)
);

create table database_bin_meta (
  bin_file_creation_time date not null,
  bin_file_author varchar not null,
  sha varchar not null
);

create table customers (
  id integer generated by default as identity,
  active boolean not null,
  debug boolean not null default false,
  automatic_signin_domain varchar null,
  customer_name varchar not null,
  customer_code varchar unique not null,
  primary key (id)
);

create table buyers (
  id integer generated by default as identity,
  sdk_generated_id integer unique not null,
  is_live_customer boolean not null default false,
  debug boolean not null default false,
  analytics boolean not null default false,
  billing boolean not null default false,
  trial boolean not null default true,
  exotic_location_fee bigint not null default 300,
  standard_location_fee bigint not null default 300,
  public_key bytea not null,
  short_name varchar not null,
  customer_id integer not null,
  looker_seats integer not null default 0,
  primary key (id),
  constraint fk_customer_id foreign key (customer_id) references customers(id),
  constraint buyer_short_name unique(short_name)
);

create table sellers (
  id integer generated by default as identity,
  public_egress_price bigint not null,
  public_ingress_price bigint,
  short_name varchar,
  customer_id integer,
  primary key (id),
  constraint fk_customer_id foreign key (customer_id) references customers(id),
  constraint seller_short_name unique(short_name)
);

create table route_shaders (
  id integer generated by default as identity,
  ab_test boolean not null,
  acceptable_latency integer not null,
  acceptable_packet_loss numeric not null,
  analysis_only boolean not null,
  bw_envelope_down_kbps integer not null,
  bw_envelope_up_kbps integer not null,
  disable_network_next boolean not null,
  latency_threshold integer not null,
  multipath boolean not null,
  pro_mode boolean not null,
  reduce_latency boolean not null,
  reduce_packet_loss boolean not null,
  selection_percent integer not null,
  buyer_id integer not null,
  primary key (id),
  constraint fk_buyer_id foreign key (buyer_id) references buyers(id)
);

create table rs_internal_configs (
  id integer generated by default as identity,
  max_latency_tradeoff integer not null,
  max_rtt integer not null,
  multipath_overload_threshold integer not null,
  route_switch_threshold integer not null,
  route_select_threshold integer not null,
  rtt_veto_default integer not null,
  rtt_veto_multipath integer not null,
  rtt_veto_packetloss integer not null,
  try_before_you_buy boolean not null,
  force_next boolean not null,
  large_customer boolean not null,
  is_uncommitted boolean not null,
  buyer_id integer not null,
  primary key (id),
  constraint fk_buyer_id foreign key (buyer_id) references buyers(id)
);

create table banned_users (
  id integer generated by default as identity,
  user_id bytea not null,
  buyer_id integer not null,
  primary key (id),
  constraint fk_buyer_id foreign key (buyer_id) references buyers(id)
);

create table datacenters (
  id integer generated by default as identity,
  display_name varchar not null unique,
  enabled boolean not null,
  latitude numeric not null,
  longitude numeric not null,
  supplier_name varchar,
  street_address varchar not null,
  seller_id integer not null,
  primary key (id),
  constraint fk_seller_id foreign key (seller_id) references sellers(id)
);

create table relays (
  id integer generated by default as identity,
  contract_term integer not null,
  display_name varchar not null,
  end_date date not null,
  included_bandwidth_gb integer not null,
  internal_ip inet,
  internal_ip_port integer,
  management_ip varchar not null,
  max_sessions integer not null,
  egress_price_override bigint not null,
  mrc bigint not null,
  overage bigint not null,
  port_speed integer not null,
  max_bandwidth_mbps integer not null,
  public_ip inet not null,
  public_ip_port integer not null,
  public_key bytea not null,
  ssh_port integer not null,
  ssh_user varchar not null,
  start_date date not null,
  bw_billing_rule integer not null,
  datacenter integer not null,
  machine_type integer not null,
  relay_state integer not null,
  dest_first boolean not null,
  internal_address_client_routable boolean not null,
  primary key (id),
  constraint fk_bw_billing_rule foreign key (bw_billing_rule) references bw_billing_rules(id),
  constraint fk_datacenter foreign key (datacenter) references datacenters(id),
  constraint fk_machine_type foreign key (machine_type) references machine_types(id),
  constraint fk_relay_state foreign key (relay_state) references relay_states(id),
  constraint relay_name unique(display_name)
);

-- datacenter_maps is a junction table between dcs and buyers
create table datacenter_maps (
  alias varchar not null,
  buyer_id integer not null,
  datacenter_id integer not null,
  primary key (buyer_id, datacenter_id),
  constraint fk_buyer foreign key (buyer_id) references buyers(id),
  constraint fk_datacenter foreign key (datacenter_id) references datacenters(id)
);

create table metadata (
  sync_sequence_number bigint not null
);

create table analytics_dashboard_categories (
  id integer generated by default as identity,
  tab_label varchar not null unique,
  premium boolean not null,
  admin_only boolean not null,
  seller_only boolean not null,
  primary key (id)
);

create table analytics_dashboards (
  id integer generated by default as identity,
  dashboard_name varchar not null,
  looker_dashboard_id integer not null,
  discovery boolean not null,
  customer_id integer not null,
  category_id integer not null,
  primary key (id),
  constraint fk_customer_id foreign key (customer_id) references customers(id),
  constraint fk_category_id foreign key (category_id) references analytics_dashboard_categories(id)
);

grant all on banned_users to engineering;
grant all on buyers to engineering;
grant all on bw_billing_rules to engineering;
grant all on database_bin_meta to engineering;
grant all on customers to engineering;
grant all on datacenter_maps to engineering;
grant all on datacenters to engineering;
grant all on machine_types to engineering;
grant all on metadata to engineering;
grant all on relay_states to engineering;
grant all on relays to engineering;
grant all on route_shaders to engineering;
grant all on rs_internal_configs to engineering;
grant all on sellers to engineering;
grant all on analytics_dashboard_categories to engineering;
grant all on analytics_dashboards to engineering;

grant select,
  insert,
  update,
  delete on route_shaders to customer;

grant select,
  insert,
  update,
  delete on banned_users to customer;

-- File generation: 2020/12/02 13:38:30

-- machine_types
insert into machine_types values (0, 'none');
insert into machine_types values (1, 'vm');
insert into machine_types values (2, 'bare-metal');

-- bw_billing_rules
insert into bw_billing_rules values (0, 'none');
insert into bw_billing_rules values (1, 'flat');
insert into bw_billing_rules values (2, 'burst');
insert into bw_billing_rules values (3, 'pool');

-- bw_billing_rules
insert into relay_states values (0, 'enabled');
insert into relay_states values (1, 'maintenance');
insert into relay_states values (2, 'disabled');
insert into relay_states values (3, 'quarantine');
insert into relay_states values (4, 'decommissioned');
insert into relay_states values (5, 'offline');

-- metadata
 update metadata set sync_sequence_number = 0;
