DONE

	Raspberry client should hit the raspberry backend to get a list of servers to connect to, and connect to one randomly.

	Setup raspberry client to be a self-contained program that runs multiple clients on n threads.

	Raspberry client number of threads is pulled from RASPBERRY_CLIENT_NUM_THREADS env var, default to 25.

	Raspberry client and server should get raspberry backend address from env var set in envs/local.env

TODO

	--------

	Raspberry server needs to detect when its running in google cloud, and query its public IP address automatically.

	This way it can be zero configuration and we can easily scale servers up and down in a MIG.

	--------

	Setup raspberry_client and raspberry_server artifacts to be built and uploaded in semaphore.

	--------

	Ask van to setup raspberry_client, raspberry_server and raspberry_backend MIGs in dev.

	Only raspberry backend needs health check and LB.

	The rest should just be a raw mig that we scale up/down manually.

	--------

	Get a steady state of a few hundred raspberry pis running in the dev environment :)

	--------







































	--------------

	The leader election is pretty clearly broken.

	I can start one relay backend, then start another, -- and the new one immediately becomes the leader. No...

	--------------

	Need to take the max of direct PL and real PL when calculating max direct PL seen

	When the raspberry pi runs at 1 packet per-second, real PL will tend to be lower, statistically speaking than near relay pings, until probabilistically enough slices have passed.

	--------------

	We need to track max direct packet loss seen

	I believe that a key component of the old system was comparing max packet loss on direct vs. max PL on relays, so over time we had some code that went "ok, so we have intermittent packet loss, loosen it up on the near relays".

	We also would need to not filter out relays forever, but instead, store them unmolested, and filter them temporarily before we use them for routing.

	--------------

	Why does it only ever show 7 routes, for 7 near relays?

	Is there something in our code that restricts to the best route, per-near relay only?

	--------------

	Once this is done, we can remove the packet loss threshold.

	--------------

	Setup google.virginia.3 relay myself, so I can understand the process and potentially streamline it.

	--------------

	Setup a deploy key for the raspberry repo.

	Set up dr strange so I can clone the raspberry repo to /mnt/c/raspberry

	Build and run 25 raspberry pi clients on dr strange continuously.

	-----------------

	Streamline the process to setup a new machine to be a relay.

	-----------------

	Instead of trying to change the hostname, just change the shell prompt to the relay name. Much easier, with no side effects.

	-----------------

	Build a relay release process in semaphore.

	-----------------

