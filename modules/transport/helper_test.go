package transport_test

import (
	"bytes"
	"context"
	"fmt"
	"io/ioutil"
	"net"
	"net/http"
	"testing"

	"github.com/networknext/backend/modules/crypto"
	"github.com/networknext/backend/modules/routing"
	"github.com/networknext/backend/modules/storage"
	"github.com/stretchr/testify/assert"
)

var TestBuyersServerPublicKey = []byte{
	0x2e, 0xdb, 0x51, 0x67, 0x63, 0x2a, 0x7e, 0xc3,
	0x9f, 0x92, 0x52, 0x81, 0xe3, 0x51, 0x30, 0xe9,
	0xb5, 0xa6, 0x36, 0x7b, 0xf8, 0xdf, 0x33, 0x64,
	0x67, 0x3f, 0x32, 0xc4, 0x6c, 0xc9, 0xba, 0xbd,
}
var TestBuyersServerPrivateKey = []byte{
	0x29, 0xf0, 0x67, 0xe2, 0x59, 0x04, 0xb7, 0xcd, 0x9e, 0xd7, 0x9c, 0xa9, 0x45, 0x61, 0xfd, 0x95,
	0x12, 0x79, 0xda, 0xa9, 0x3b, 0xa0, 0x41, 0xf1, 0xb7, 0xbc, 0x47, 0xaf, 0x50, 0xcd, 0x7c, 0x65,
	0x2e, 0xdb, 0x51, 0x67, 0x63, 0x2a, 0x7e, 0xc3, 0x9f, 0x92, 0x52, 0x81, 0xe3, 0x51, 0x30, 0xe9,
	0xb5, 0xa6, 0x36, 0x7b, 0xf8, 0xdf, 0x33, 0x64, 0x67, 0x3f, 0x32, 0xc4, 0x6c, 0xc9, 0xba, 0xbd,
}

var TestBuyersClientPublicKey = []byte{
	0x8f, 0x76, 0x31, 0x80, 0x85, 0x99, 0xc7, 0xc1,
	0x87, 0x22, 0x75, 0x42, 0x17, 0x3a, 0x3d, 0x52,
	0x52, 0x65, 0xdd, 0xb2, 0xda, 0xaf, 0xba, 0x22,
	0xe5, 0x77, 0x84, 0xa8, 0xfc, 0x51, 0x73, 0xbb,
}
var TestBuyersClientPrivateKey = []byte{
	0xe7, 0x2c, 0x18, 0x6b, 0x28, 0x3b, 0xd0, 0x83, 0x65, 0x9f, 0xb6, 0x55, 0x13, 0x6e, 0xf4, 0xb1,
	0x89, 0x2e, 0x1e, 0x90, 0x07, 0x40, 0x39, 0xf9, 0x82, 0x17, 0x19, 0xa3, 0x23, 0x8b, 0xeb, 0x21,
	0x8f, 0x76, 0x31, 0x80, 0x85, 0x99, 0xc7, 0xc1, 0x87, 0x22, 0x75, 0x42, 0x17, 0x3a, 0x3d, 0x52,
	0x52, 0x65, 0xdd, 0xb2, 0xda, 0xaf, 0xba, 0x22, 0xe5, 0x77, 0x84, 0xa8, 0xfc, 0x51, 0x73, 0xbb,
}

var TestServerBackendPublicKey = []byte{
	0x03, 0x0f, 0xc9, 0x26, 0x73, 0xeb, 0x82, 0x0f,
	0x42, 0x9a, 0xfa, 0x88, 0x41, 0x7a, 0xd8, 0xad,
	0xb2, 0x6f, 0x4c, 0x8a, 0xd9, 0x2b, 0x7c, 0x6c,
	0xcd, 0x77, 0x9d, 0x00, 0xff, 0x97, 0xe1, 0x88,
}
var TestServerBackendPrivateKey = []byte{
	0x51, 0x9c, 0xa5, 0xbd, 0xaa, 0x12, 0x2e, 0x8f, 0x36, 0xba, 0x49, 0xe1, 0xe3, 0x09, 0x13, 0x83,
	0x5d, 0xf0, 0x59, 0x13, 0x33, 0xb1, 0x92, 0x7e, 0x72, 0xb5, 0xdc, 0x63, 0x0e, 0xc0, 0xf8, 0xf8,
	0x03, 0x0f, 0xc9, 0x26, 0x73, 0xeb, 0x82, 0x0f, 0x42, 0x9a, 0xfa, 0x88, 0x41, 0x7a, 0xd8, 0xad,
	0xb2, 0x6f, 0x4c, 0x8a, 0xd9, 0x2b, 0x7c, 0x6c, 0xcd, 0x77, 0x9d, 0x00, 0xff, 0x97, 0xe1, 0x88,
}

var TestRouterPublicKey = []byte{
	0x09, 0x26, 0xd2, 0x3a, 0x11, 0x21, 0x2b, 0x2f,
	0x65, 0xe1, 0x6c, 0x7c, 0x03, 0xf6, 0x47, 0x6c,
	0x19, 0x13, 0x60, 0xaf, 0xd4, 0xb4, 0x56, 0x2e,
	0x6a, 0xb7, 0x0a, 0x19, 0xeb, 0x79, 0xa9, 0xa0,
}
var TestRouterPrivateKey = []byte{
	0x17, 0x3f, 0xc0, 0x5e, 0x2f, 0xc3, 0x7a, 0xef, 0x5b, 0x1c, 0x5e, 0xc0, 0x46, 0x4d, 0xd5, 0xcd,
	0x30, 0x73, 0x01, 0x68, 0x41, 0x2c, 0xe1, 0x13, 0x05, 0x7c, 0xe3, 0x7a, 0xf5, 0x3c, 0xb0, 0xea,
	0x09, 0x26, 0xd2, 0x3a, 0x11, 0x21, 0x2b, 0x2f, 0x65, 0xe1, 0x6c, 0x7c, 0x03, 0xf6, 0x47, 0x6c,
	0x19, 0x13, 0x60, 0xaf, 0xd4, 0xb4, 0x56, 0x2e, 0x6a, 0xb7, 0x0a, 0x19, 0xeb, 0x79, 0xa9, 0xa0,
}

var TestRelayPublicKey = []byte{
	0xe2, 0xf1, 0xcb, 0x51, 0x69, 0x3e, 0x61, 0x2b,
	0x14, 0xb9, 0x17, 0xcd, 0x6a, 0x4e, 0xa3, 0x33,
	0x38, 0x9c, 0x21, 0x7c, 0xcc, 0xc5, 0x2e, 0x3b,
	0x89, 0xb2, 0x2c, 0x0a, 0xcb, 0xd1, 0x56, 0x7a,
}
var TestRelayPrivateKey = []byte{
	0xc4, 0x5e, 0xb0, 0x9a, 0xd6, 0xb1, 0xc0, 0x0f, 0xdc, 0x89, 0x7b, 0x32, 0xa0, 0xf1, 0xa6, 0xc0,
	0x43, 0xee, 0x50, 0x5a, 0xed, 0x9b, 0x09, 0x69, 0x0f, 0x0e, 0x4d, 0x74, 0xe2, 0x52, 0x26, 0x08,
	0xe2, 0xf1, 0xcb, 0x51, 0x69, 0x3e, 0x61, 0x2b, 0x14, 0xb9, 0x17, 0xcd, 0x6a, 0x4e, 0xa3, 0x33,
	0x38, 0x9c, 0x21, 0x7c, 0xcc, 0xc5, 0x2e, 0x3b, 0x89, 0xb2, 0x2c, 0x0a, 0xcb, 0xd1, 0x56, 0x7a,
}

type mockRouteProvider struct {
	relay            routing.Relay
	datacenterRelays []routing.Relay
	routes           []routing.Route
}

func (rp *mockRouteProvider) ResolveRelay(id uint64) (routing.Relay, error) {
	return rp.relay, nil
}

func (rp *mockRouteProvider) RelaysIn(ds routing.Datacenter) []routing.Relay {
	return rp.datacenterRelays
}

type RoundTripFunc func(req *http.Request) *http.Response

func (f RoundTripFunc) RoundTrip(req *http.Request) (*http.Response, error) {
	return f(req), nil
}

func NewTestHTTPClient(fn RoundTripFunc) *http.Client {
	return &http.Client{
		Transport: RoundTripFunc(fn),
	}
}

var NoopHTTPClient = NewTestHTTPClient(func(req *http.Request) *http.Response {
	return &http.Response{
		StatusCode: http.StatusOK,
		Header:     make(http.Header),
		Body:       ioutil.NopCloser(bytes.NewBufferString(`{}`)),
	}
})

func seedStorage(t *testing.T, inMemory *storage.InMemory, addressesToAdd []string) {
	for i, addrString := range addressesToAdd {
		addr, err := net.ResolveUDPAddr("udp", addrString)
		assert.NoError(t, err)

		relay := routing.Relay{
			ID:   crypto.HashID(addrString),
			Name: fmt.Sprintf("Relay %d", i),
			Addr: *addr,
			Seller: routing.Seller{
				ID:   fmt.Sprintf("%d", i),
				Name: fmt.Sprintf("Seller %d", i),
			},
			Datacenter: routing.Datacenter{
				ID:      crypto.HashID(fmt.Sprintf("Datacenter %d", i)),
				Name:    fmt.Sprintf("Datacenter %d", i),
				Enabled: true,
			},
			State: routing.RelayStateEnabled,
		}

		err = inMemory.AddSeller(context.Background(), relay.Seller)
		assert.NoError(t, err)

		err = inMemory.AddDatacenter(context.Background(), relay.Datacenter)
		assert.NoError(t, err)

		err = inMemory.AddRelay(context.Background(), relay)
		assert.NoError(t, err)
	}
}
