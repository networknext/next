// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package storage

import (
	"context"
	"github.com/networknext/backend/modules/core"
	"github.com/networknext/backend/modules/routing"
	"sync"
	"time"
)

var (
	lockStorerMockAddBannedUser             sync.RWMutex
	lockStorerMockAddBuyer                  sync.RWMutex
	lockStorerMockAddCustomer               sync.RWMutex
	lockStorerMockAddDatacenter             sync.RWMutex
	lockStorerMockAddDatacenterMap          sync.RWMutex
	lockStorerMockAddInternalConfig         sync.RWMutex
	lockStorerMockAddRelay                  sync.RWMutex
	lockStorerMockAddRouteShader            sync.RWMutex
	lockStorerMockAddSeller                 sync.RWMutex
	lockStorerMockBannedUsers               sync.RWMutex
	lockStorerMockBuyer                     sync.RWMutex
	lockStorerMockBuyerIDFromCustomerName   sync.RWMutex
	lockStorerMockBuyerWithCompanyCode      sync.RWMutex
	lockStorerMockBuyers                    sync.RWMutex
	lockStorerMockCheckSequenceNumber       sync.RWMutex
	lockStorerMockCustomer                  sync.RWMutex
	lockStorerMockCustomerWithName          sync.RWMutex
	lockStorerMockCustomers                 sync.RWMutex
	lockStorerMockDatacenter                sync.RWMutex
	lockStorerMockDatacenters               sync.RWMutex
	lockStorerMockGetDatacenterMapsForBuyer sync.RWMutex
	lockStorerMockGetFeatureFlagByName      sync.RWMutex
	lockStorerMockGetFeatureFlags           sync.RWMutex
	lockStorerMockIncrementSequenceNumber   sync.RWMutex
	lockStorerMockInternalConfig            sync.RWMutex
	lockStorerMockListDatacenterMaps        sync.RWMutex
	lockStorerMockRelay                     sync.RWMutex
	lockStorerMockRelays                    sync.RWMutex
	lockStorerMockRemoveBannedUser          sync.RWMutex
	lockStorerMockRemoveBuyer               sync.RWMutex
	lockStorerMockRemoveCustomer            sync.RWMutex
	lockStorerMockRemoveDatacenter          sync.RWMutex
	lockStorerMockRemoveDatacenterMap       sync.RWMutex
	lockStorerMockRemoveFeatureFlagByName   sync.RWMutex
	lockStorerMockRemoveInternalConfig      sync.RWMutex
	lockStorerMockRemoveRelay               sync.RWMutex
	lockStorerMockRemoveRouteShader         sync.RWMutex
	lockStorerMockRemoveSeller              sync.RWMutex
	lockStorerMockRouteShader               sync.RWMutex
	lockStorerMockSeller                    sync.RWMutex
	lockStorerMockSellerIDFromCustomerName  sync.RWMutex
	lockStorerMockSellerWithCompanyCode     sync.RWMutex
	lockStorerMockSellers                   sync.RWMutex
	lockStorerMockSetBuyer                  sync.RWMutex
	lockStorerMockSetCustomer               sync.RWMutex
	lockStorerMockSetCustomerLink           sync.RWMutex
	lockStorerMockSetDatacenter             sync.RWMutex
	lockStorerMockSetFeatureFlagByName      sync.RWMutex
	lockStorerMockSetRelay                  sync.RWMutex
	lockStorerMockSetRelayMetadata          sync.RWMutex
	lockStorerMockSetSeller                 sync.RWMutex
	lockStorerMockSetSequenceNumber         sync.RWMutex
	lockStorerMockSyncLoop                  sync.RWMutex
	lockStorerMockUpdateBuyer               sync.RWMutex
	lockStorerMockUpdateCustomer            sync.RWMutex
	lockStorerMockUpdateInternalConfig      sync.RWMutex
	lockStorerMockUpdateRelay               sync.RWMutex
	lockStorerMockUpdateRouteShader         sync.RWMutex
	lockStorerMockUpdateSeller              sync.RWMutex
)

// Ensure, that StorerMock does implement Storer.
// If this is not the case, regenerate this file with moq.
var _ Storer = &StorerMock{}

// StorerMock is a mock implementation of Storer.
//
//     func TestSomethingThatUsesStorer(t *testing.T) {
//
//         // make and configure a mocked Storer
//         mockedStorer := &StorerMock{
//             AddBannedUserFunc: func(ctx context.Context, buyerID uint64, userID uint64) error {
// 	               panic("mock out the AddBannedUser method")
//             },
//             AddBuyerFunc: func(ctx context.Context, buyer routing.Buyer) error {
// 	               panic("mock out the AddBuyer method")
//             },
//             AddCustomerFunc: func(ctx context.Context, customer routing.Customer) error {
// 	               panic("mock out the AddCustomer method")
//             },
//             AddDatacenterFunc: func(ctx context.Context, datacenter routing.Datacenter) error {
// 	               panic("mock out the AddDatacenter method")
//             },
//             AddDatacenterMapFunc: func(ctx context.Context, dcMap routing.DatacenterMap) error {
// 	               panic("mock out the AddDatacenterMap method")
//             },
//             AddInternalConfigFunc: func(ctx context.Context, internalConfig core.InternalConfig, buyerID uint64) error {
// 	               panic("mock out the AddInternalConfig method")
//             },
//             AddRelayFunc: func(ctx context.Context, relay routing.Relay) error {
// 	               panic("mock out the AddRelay method")
//             },
//             AddRouteShaderFunc: func(ctx context.Context, routeShader core.RouteShader, buyerID uint64) error {
// 	               panic("mock out the AddRouteShader method")
//             },
//             AddSellerFunc: func(ctx context.Context, seller routing.Seller) error {
// 	               panic("mock out the AddSeller method")
//             },
//             BannedUsersFunc: func(buyerID uint64) (map[uint64]bool, error) {
// 	               panic("mock out the BannedUsers method")
//             },
//             BuyerFunc: func(id uint64) (routing.Buyer, error) {
// 	               panic("mock out the Buyer method")
//             },
//             BuyerIDFromCustomerNameFunc: func(ctx context.Context, customerName string) (uint64, error) {
// 	               panic("mock out the BuyerIDFromCustomerName method")
//             },
//             BuyerWithCompanyCodeFunc: func(code string) (routing.Buyer, error) {
// 	               panic("mock out the BuyerWithCompanyCode method")
//             },
//             BuyersFunc: func() []routing.Buyer {
// 	               panic("mock out the Buyers method")
//             },
//             CheckSequenceNumberFunc: func(ctx context.Context) (bool, int64, error) {
// 	               panic("mock out the CheckSequenceNumber method")
//             },
//             CustomerFunc: func(code string) (routing.Customer, error) {
// 	               panic("mock out the Customer method")
//             },
//             CustomerWithNameFunc: func(name string) (routing.Customer, error) {
// 	               panic("mock out the CustomerWithName method")
//             },
//             CustomersFunc: func() []routing.Customer {
// 	               panic("mock out the Customers method")
//             },
//             DatacenterFunc: func(datacenterID uint64) (routing.Datacenter, error) {
// 	               panic("mock out the Datacenter method")
//             },
//             DatacentersFunc: func() []routing.Datacenter {
// 	               panic("mock out the Datacenters method")
//             },
//             GetDatacenterMapsForBuyerFunc: func(buyerID uint64) map[uint64]routing.DatacenterMap {
// 	               panic("mock out the GetDatacenterMapsForBuyer method")
//             },
//             GetFeatureFlagByNameFunc: func(flagName string) (map[string]bool, error) {
// 	               panic("mock out the GetFeatureFlagByName method")
//             },
//             GetFeatureFlagsFunc: func() map[string]bool {
// 	               panic("mock out the GetFeatureFlags method")
//             },
//             IncrementSequenceNumberFunc: func(ctx context.Context) error {
// 	               panic("mock out the IncrementSequenceNumber method")
//             },
//             InternalConfigFunc: func(buyerID uint64) (core.InternalConfig, error) {
// 	               panic("mock out the InternalConfig method")
//             },
//             ListDatacenterMapsFunc: func(dcID uint64) map[uint64]routing.DatacenterMap {
// 	               panic("mock out the ListDatacenterMaps method")
//             },
//             RelayFunc: func(id uint64) (routing.Relay, error) {
// 	               panic("mock out the Relay method")
//             },
//             RelaysFunc: func() []routing.Relay {
// 	               panic("mock out the Relays method")
//             },
//             RemoveBannedUserFunc: func(ctx context.Context, buyerID uint64, userID uint64) error {
// 	               panic("mock out the RemoveBannedUser method")
//             },
//             RemoveBuyerFunc: func(ctx context.Context, id uint64) error {
// 	               panic("mock out the RemoveBuyer method")
//             },
//             RemoveCustomerFunc: func(ctx context.Context, code string) error {
// 	               panic("mock out the RemoveCustomer method")
//             },
//             RemoveDatacenterFunc: func(ctx context.Context, id uint64) error {
// 	               panic("mock out the RemoveDatacenter method")
//             },
//             RemoveDatacenterMapFunc: func(ctx context.Context, dcMap routing.DatacenterMap) error {
// 	               panic("mock out the RemoveDatacenterMap method")
//             },
//             RemoveFeatureFlagByNameFunc: func(ctx context.Context, flagName string) error {
// 	               panic("mock out the RemoveFeatureFlagByName method")
//             },
//             RemoveInternalConfigFunc: func(ctx context.Context, buyerID uint64) error {
// 	               panic("mock out the RemoveInternalConfig method")
//             },
//             RemoveRelayFunc: func(ctx context.Context, id uint64) error {
// 	               panic("mock out the RemoveRelay method")
//             },
//             RemoveRouteShaderFunc: func(ctx context.Context, buyerID uint64) error {
// 	               panic("mock out the RemoveRouteShader method")
//             },
//             RemoveSellerFunc: func(ctx context.Context, id string) error {
// 	               panic("mock out the RemoveSeller method")
//             },
//             RouteShaderFunc: func(buyerID uint64) (core.RouteShader, error) {
// 	               panic("mock out the RouteShader method")
//             },
//             SellerFunc: func(id string) (routing.Seller, error) {
// 	               panic("mock out the Seller method")
//             },
//             SellerIDFromCustomerNameFunc: func(ctx context.Context, customerName string) (string, error) {
// 	               panic("mock out the SellerIDFromCustomerName method")
//             },
//             SellerWithCompanyCodeFunc: func(code string) (routing.Seller, error) {
// 	               panic("mock out the SellerWithCompanyCode method")
//             },
//             SellersFunc: func() []routing.Seller {
// 	               panic("mock out the Sellers method")
//             },
//             SetBuyerFunc: func(ctx context.Context, buyer routing.Buyer) error {
// 	               panic("mock out the SetBuyer method")
//             },
//             SetCustomerFunc: func(ctx context.Context, customer routing.Customer) error {
// 	               panic("mock out the SetCustomer method")
//             },
//             SetCustomerLinkFunc: func(ctx context.Context, customerName string, buyerID uint64, sellerID string) error {
// 	               panic("mock out the SetCustomerLink method")
//             },
//             SetDatacenterFunc: func(ctx context.Context, datacenter routing.Datacenter) error {
// 	               panic("mock out the SetDatacenter method")
//             },
//             SetFeatureFlagByNameFunc: func(ctx context.Context, flagName string, flagVal bool) error {
// 	               panic("mock out the SetFeatureFlagByName method")
//             },
//             SetRelayFunc: func(ctx context.Context, relay routing.Relay) error {
// 	               panic("mock out the SetRelay method")
//             },
//             SetRelayMetadataFunc: func(ctx context.Context, relay routing.Relay) error {
// 	               panic("mock out the SetRelayMetadata method")
//             },
//             SetSellerFunc: func(ctx context.Context, seller routing.Seller) error {
// 	               panic("mock out the SetSeller method")
//             },
//             SetSequenceNumberFunc: func(ctx context.Context, value int64) error {
// 	               panic("mock out the SetSequenceNumber method")
//             },
//             SyncLoopFunc: func(ctx context.Context, c <-chan time.Time)  {
// 	               panic("mock out the SyncLoop method")
//             },
//             UpdateBuyerFunc: func(ctx context.Context, buyerID uint64, field string, value interface{}) error {
// 	               panic("mock out the UpdateBuyer method")
//             },
//             UpdateCustomerFunc: func(ctx context.Context, customerID string, field string, value interface{}) error {
// 	               panic("mock out the UpdateCustomer method")
//             },
//             UpdateInternalConfigFunc: func(ctx context.Context, buyerID uint64, field string, value interface{}) error {
// 	               panic("mock out the UpdateInternalConfig method")
//             },
//             UpdateRelayFunc: func(ctx context.Context, relayID uint64, field string, value interface{}) error {
// 	               panic("mock out the UpdateRelay method")
//             },
//             UpdateRouteShaderFunc: func(ctx context.Context, buyerID uint64, field string, value interface{}) error {
// 	               panic("mock out the UpdateRouteShader method")
//             },
//             UpdateSellerFunc: func(ctx context.Context, sellerID string, field string, value interface{}) error {
// 	               panic("mock out the UpdateSeller method")
//             },
//         }
//
//         // use mockedStorer in code that requires Storer
//         // and then make assertions.
//
//     }
type StorerMock struct {
	// AddBannedUserFunc mocks the AddBannedUser method.
	AddBannedUserFunc func(ctx context.Context, buyerID uint64, userID uint64) error

	// AddBuyerFunc mocks the AddBuyer method.
	AddBuyerFunc func(ctx context.Context, buyer routing.Buyer) error

	// AddCustomerFunc mocks the AddCustomer method.
	AddCustomerFunc func(ctx context.Context, customer routing.Customer) error

	// AddDatacenterFunc mocks the AddDatacenter method.
	AddDatacenterFunc func(ctx context.Context, datacenter routing.Datacenter) error

	// AddDatacenterMapFunc mocks the AddDatacenterMap method.
	AddDatacenterMapFunc func(ctx context.Context, dcMap routing.DatacenterMap) error

	// AddInternalConfigFunc mocks the AddInternalConfig method.
	AddInternalConfigFunc func(ctx context.Context, internalConfig core.InternalConfig, buyerID uint64) error

	// AddRelayFunc mocks the AddRelay method.
	AddRelayFunc func(ctx context.Context, relay routing.Relay) error

	// AddRouteShaderFunc mocks the AddRouteShader method.
	AddRouteShaderFunc func(ctx context.Context, routeShader core.RouteShader, buyerID uint64) error

	// AddSellerFunc mocks the AddSeller method.
	AddSellerFunc func(ctx context.Context, seller routing.Seller) error

	// BannedUsersFunc mocks the BannedUsers method.
	BannedUsersFunc func(buyerID uint64) (map[uint64]bool, error)

	// BuyerFunc mocks the Buyer method.
	BuyerFunc func(id uint64) (routing.Buyer, error)

	// BuyerIDFromCustomerNameFunc mocks the BuyerIDFromCustomerName method.
	BuyerIDFromCustomerNameFunc func(ctx context.Context, customerName string) (uint64, error)

	// BuyerWithCompanyCodeFunc mocks the BuyerWithCompanyCode method.
	BuyerWithCompanyCodeFunc func(code string) (routing.Buyer, error)

	// BuyersFunc mocks the Buyers method.
	BuyersFunc func() []routing.Buyer

	// CheckSequenceNumberFunc mocks the CheckSequenceNumber method.
	CheckSequenceNumberFunc func(ctx context.Context) (bool, int64, error)

	// CustomerFunc mocks the Customer method.
	CustomerFunc func(code string) (routing.Customer, error)

	// CustomerWithNameFunc mocks the CustomerWithName method.
	CustomerWithNameFunc func(name string) (routing.Customer, error)

	// CustomersFunc mocks the Customers method.
	CustomersFunc func() []routing.Customer

	// DatacenterFunc mocks the Datacenter method.
	DatacenterFunc func(datacenterID uint64) (routing.Datacenter, error)

	// DatacentersFunc mocks the Datacenters method.
	DatacentersFunc func() []routing.Datacenter

	// GetDatacenterMapsForBuyerFunc mocks the GetDatacenterMapsForBuyer method.
	GetDatacenterMapsForBuyerFunc func(buyerID uint64) map[uint64]routing.DatacenterMap

	// GetFeatureFlagByNameFunc mocks the GetFeatureFlagByName method.
	GetFeatureFlagByNameFunc func(flagName string) (map[string]bool, error)

	// GetFeatureFlagsFunc mocks the GetFeatureFlags method.
	GetFeatureFlagsFunc func() map[string]bool

	// IncrementSequenceNumberFunc mocks the IncrementSequenceNumber method.
	IncrementSequenceNumberFunc func(ctx context.Context) error

	// InternalConfigFunc mocks the InternalConfig method.
	InternalConfigFunc func(buyerID uint64) (core.InternalConfig, error)

	// ListDatacenterMapsFunc mocks the ListDatacenterMaps method.
	ListDatacenterMapsFunc func(dcID uint64) map[uint64]routing.DatacenterMap

	// RelayFunc mocks the Relay method.
	RelayFunc func(id uint64) (routing.Relay, error)

	// RelaysFunc mocks the Relays method.
	RelaysFunc func() []routing.Relay

	// RemoveBannedUserFunc mocks the RemoveBannedUser method.
	RemoveBannedUserFunc func(ctx context.Context, buyerID uint64, userID uint64) error

	// RemoveBuyerFunc mocks the RemoveBuyer method.
	RemoveBuyerFunc func(ctx context.Context, id uint64) error

	// RemoveCustomerFunc mocks the RemoveCustomer method.
	RemoveCustomerFunc func(ctx context.Context, code string) error

	// RemoveDatacenterFunc mocks the RemoveDatacenter method.
	RemoveDatacenterFunc func(ctx context.Context, id uint64) error

	// RemoveDatacenterMapFunc mocks the RemoveDatacenterMap method.
	RemoveDatacenterMapFunc func(ctx context.Context, dcMap routing.DatacenterMap) error

	// RemoveFeatureFlagByNameFunc mocks the RemoveFeatureFlagByName method.
	RemoveFeatureFlagByNameFunc func(ctx context.Context, flagName string) error

	// RemoveInternalConfigFunc mocks the RemoveInternalConfig method.
	RemoveInternalConfigFunc func(ctx context.Context, buyerID uint64) error

	// RemoveRelayFunc mocks the RemoveRelay method.
	RemoveRelayFunc func(ctx context.Context, id uint64) error

	// RemoveRouteShaderFunc mocks the RemoveRouteShader method.
	RemoveRouteShaderFunc func(ctx context.Context, buyerID uint64) error

	// RemoveSellerFunc mocks the RemoveSeller method.
	RemoveSellerFunc func(ctx context.Context, id string) error

	// RouteShaderFunc mocks the RouteShader method.
	RouteShaderFunc func(buyerID uint64) (core.RouteShader, error)

	// SellerFunc mocks the Seller method.
	SellerFunc func(id string) (routing.Seller, error)

	// SellerIDFromCustomerNameFunc mocks the SellerIDFromCustomerName method.
	SellerIDFromCustomerNameFunc func(ctx context.Context, customerName string) (string, error)

	// SellerWithCompanyCodeFunc mocks the SellerWithCompanyCode method.
	SellerWithCompanyCodeFunc func(code string) (routing.Seller, error)

	// SellersFunc mocks the Sellers method.
	SellersFunc func() []routing.Seller

	// SetBuyerFunc mocks the SetBuyer method.
	SetBuyerFunc func(ctx context.Context, buyer routing.Buyer) error

	// SetCustomerFunc mocks the SetCustomer method.
	SetCustomerFunc func(ctx context.Context, customer routing.Customer) error

	// SetCustomerLinkFunc mocks the SetCustomerLink method.
	SetCustomerLinkFunc func(ctx context.Context, customerName string, buyerID uint64, sellerID string) error

	// SetDatacenterFunc mocks the SetDatacenter method.
	SetDatacenterFunc func(ctx context.Context, datacenter routing.Datacenter) error

	// SetFeatureFlagByNameFunc mocks the SetFeatureFlagByName method.
	SetFeatureFlagByNameFunc func(ctx context.Context, flagName string, flagVal bool) error

	// SetRelayFunc mocks the SetRelay method.
	SetRelayFunc func(ctx context.Context, relay routing.Relay) error

	// SetRelayMetadataFunc mocks the SetRelayMetadata method.
	SetRelayMetadataFunc func(ctx context.Context, relay routing.Relay) error

	// SetSellerFunc mocks the SetSeller method.
	SetSellerFunc func(ctx context.Context, seller routing.Seller) error

	// SetSequenceNumberFunc mocks the SetSequenceNumber method.
	SetSequenceNumberFunc func(ctx context.Context, value int64) error

	// SyncLoopFunc mocks the SyncLoop method.
	SyncLoopFunc func(ctx context.Context, c <-chan time.Time)

	// UpdateBuyerFunc mocks the UpdateBuyer method.
	UpdateBuyerFunc func(ctx context.Context, buyerID uint64, field string, value interface{}) error

	// UpdateCustomerFunc mocks the UpdateCustomer method.
	UpdateCustomerFunc func(ctx context.Context, customerID string, field string, value interface{}) error

	// UpdateInternalConfigFunc mocks the UpdateInternalConfig method.
	UpdateInternalConfigFunc func(ctx context.Context, buyerID uint64, field string, value interface{}) error

	// UpdateRelayFunc mocks the UpdateRelay method.
	UpdateRelayFunc func(ctx context.Context, relayID uint64, field string, value interface{}) error

	// UpdateRouteShaderFunc mocks the UpdateRouteShader method.
	UpdateRouteShaderFunc func(ctx context.Context, buyerID uint64, field string, value interface{}) error

	// UpdateSellerFunc mocks the UpdateSeller method.
	UpdateSellerFunc func(ctx context.Context, sellerID string, field string, value interface{}) error

	// calls tracks calls to the methods.
	calls struct {
		// AddBannedUser holds details about calls to the AddBannedUser method.
		AddBannedUser []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// BuyerID is the buyerID argument value.
			BuyerID uint64
			// UserID is the userID argument value.
			UserID uint64
		}
		// AddBuyer holds details about calls to the AddBuyer method.
		AddBuyer []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Buyer is the buyer argument value.
			Buyer routing.Buyer
		}
		// AddCustomer holds details about calls to the AddCustomer method.
		AddCustomer []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Customer is the customer argument value.
			Customer routing.Customer
		}
		// AddDatacenter holds details about calls to the AddDatacenter method.
		AddDatacenter []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Datacenter is the datacenter argument value.
			Datacenter routing.Datacenter
		}
		// AddDatacenterMap holds details about calls to the AddDatacenterMap method.
		AddDatacenterMap []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// DcMap is the dcMap argument value.
			DcMap routing.DatacenterMap
		}
		// AddInternalConfig holds details about calls to the AddInternalConfig method.
		AddInternalConfig []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// InternalConfig is the internalConfig argument value.
			InternalConfig core.InternalConfig
			// BuyerID is the buyerID argument value.
			BuyerID uint64
		}
		// AddRelay holds details about calls to the AddRelay method.
		AddRelay []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Relay is the relay argument value.
			Relay routing.Relay
		}
		// AddRouteShader holds details about calls to the AddRouteShader method.
		AddRouteShader []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// RouteShader is the routeShader argument value.
			RouteShader core.RouteShader
			// BuyerID is the buyerID argument value.
			BuyerID uint64
		}
		// AddSeller holds details about calls to the AddSeller method.
		AddSeller []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Seller is the seller argument value.
			Seller routing.Seller
		}
		// BannedUsers holds details about calls to the BannedUsers method.
		BannedUsers []struct {
			// BuyerID is the buyerID argument value.
			BuyerID uint64
		}
		// Buyer holds details about calls to the Buyer method.
		Buyer []struct {
			// ID is the id argument value.
			ID uint64
		}
		// BuyerIDFromCustomerName holds details about calls to the BuyerIDFromCustomerName method.
		BuyerIDFromCustomerName []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// CustomerName is the customerName argument value.
			CustomerName string
		}
		// BuyerWithCompanyCode holds details about calls to the BuyerWithCompanyCode method.
		BuyerWithCompanyCode []struct {
			// Code is the code argument value.
			Code string
		}
		// Buyers holds details about calls to the Buyers method.
		Buyers []struct {
		}
		// CheckSequenceNumber holds details about calls to the CheckSequenceNumber method.
		CheckSequenceNumber []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
		// Customer holds details about calls to the Customer method.
		Customer []struct {
			// Code is the code argument value.
			Code string
		}
		// CustomerWithName holds details about calls to the CustomerWithName method.
		CustomerWithName []struct {
			// Name is the name argument value.
			Name string
		}
		// Customers holds details about calls to the Customers method.
		Customers []struct {
		}
		// Datacenter holds details about calls to the Datacenter method.
		Datacenter []struct {
			// DatacenterID is the datacenterID argument value.
			DatacenterID uint64
		}
		// Datacenters holds details about calls to the Datacenters method.
		Datacenters []struct {
		}
		// GetDatacenterMapsForBuyer holds details about calls to the GetDatacenterMapsForBuyer method.
		GetDatacenterMapsForBuyer []struct {
			// BuyerID is the buyerID argument value.
			BuyerID uint64
		}
		// GetFeatureFlagByName holds details about calls to the GetFeatureFlagByName method.
		GetFeatureFlagByName []struct {
			// FlagName is the flagName argument value.
			FlagName string
		}
		// GetFeatureFlags holds details about calls to the GetFeatureFlags method.
		GetFeatureFlags []struct {
		}
		// IncrementSequenceNumber holds details about calls to the IncrementSequenceNumber method.
		IncrementSequenceNumber []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
		// InternalConfig holds details about calls to the InternalConfig method.
		InternalConfig []struct {
			// BuyerID is the buyerID argument value.
			BuyerID uint64
		}
		// ListDatacenterMaps holds details about calls to the ListDatacenterMaps method.
		ListDatacenterMaps []struct {
			// DcID is the dcID argument value.
			DcID uint64
		}
		// Relay holds details about calls to the Relay method.
		Relay []struct {
			// ID is the id argument value.
			ID uint64
		}
		// Relays holds details about calls to the Relays method.
		Relays []struct {
		}
		// RemoveBannedUser holds details about calls to the RemoveBannedUser method.
		RemoveBannedUser []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// BuyerID is the buyerID argument value.
			BuyerID uint64
			// UserID is the userID argument value.
			UserID uint64
		}
		// RemoveBuyer holds details about calls to the RemoveBuyer method.
		RemoveBuyer []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID uint64
		}
		// RemoveCustomer holds details about calls to the RemoveCustomer method.
		RemoveCustomer []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Code is the code argument value.
			Code string
		}
		// RemoveDatacenter holds details about calls to the RemoveDatacenter method.
		RemoveDatacenter []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID uint64
		}
		// RemoveDatacenterMap holds details about calls to the RemoveDatacenterMap method.
		RemoveDatacenterMap []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// DcMap is the dcMap argument value.
			DcMap routing.DatacenterMap
		}
		// RemoveFeatureFlagByName holds details about calls to the RemoveFeatureFlagByName method.
		RemoveFeatureFlagByName []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// FlagName is the flagName argument value.
			FlagName string
		}
		// RemoveInternalConfig holds details about calls to the RemoveInternalConfig method.
		RemoveInternalConfig []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// BuyerID is the buyerID argument value.
			BuyerID uint64
		}
		// RemoveRelay holds details about calls to the RemoveRelay method.
		RemoveRelay []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID uint64
		}
		// RemoveRouteShader holds details about calls to the RemoveRouteShader method.
		RemoveRouteShader []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// BuyerID is the buyerID argument value.
			BuyerID uint64
		}
		// RemoveSeller holds details about calls to the RemoveSeller method.
		RemoveSeller []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID string
		}
		// RouteShader holds details about calls to the RouteShader method.
		RouteShader []struct {
			// BuyerID is the buyerID argument value.
			BuyerID uint64
		}
		// Seller holds details about calls to the Seller method.
		Seller []struct {
			// ID is the id argument value.
			ID string
		}
		// SellerIDFromCustomerName holds details about calls to the SellerIDFromCustomerName method.
		SellerIDFromCustomerName []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// CustomerName is the customerName argument value.
			CustomerName string
		}
		// SellerWithCompanyCode holds details about calls to the SellerWithCompanyCode method.
		SellerWithCompanyCode []struct {
			// Code is the code argument value.
			Code string
		}
		// Sellers holds details about calls to the Sellers method.
		Sellers []struct {
		}
		// SetBuyer holds details about calls to the SetBuyer method.
		SetBuyer []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Buyer is the buyer argument value.
			Buyer routing.Buyer
		}
		// SetCustomer holds details about calls to the SetCustomer method.
		SetCustomer []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Customer is the customer argument value.
			Customer routing.Customer
		}
		// SetCustomerLink holds details about calls to the SetCustomerLink method.
		SetCustomerLink []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// CustomerName is the customerName argument value.
			CustomerName string
			// BuyerID is the buyerID argument value.
			BuyerID uint64
			// SellerID is the sellerID argument value.
			SellerID string
		}
		// SetDatacenter holds details about calls to the SetDatacenter method.
		SetDatacenter []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Datacenter is the datacenter argument value.
			Datacenter routing.Datacenter
		}
		// SetFeatureFlagByName holds details about calls to the SetFeatureFlagByName method.
		SetFeatureFlagByName []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// FlagName is the flagName argument value.
			FlagName string
			// FlagVal is the flagVal argument value.
			FlagVal bool
		}
		// SetRelay holds details about calls to the SetRelay method.
		SetRelay []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Relay is the relay argument value.
			Relay routing.Relay
		}
		// SetRelayMetadata holds details about calls to the SetRelayMetadata method.
		SetRelayMetadata []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Relay is the relay argument value.
			Relay routing.Relay
		}
		// SetSeller holds details about calls to the SetSeller method.
		SetSeller []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Seller is the seller argument value.
			Seller routing.Seller
		}
		// SetSequenceNumber holds details about calls to the SetSequenceNumber method.
		SetSequenceNumber []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Value is the value argument value.
			Value int64
		}
		// SyncLoop holds details about calls to the SyncLoop method.
		SyncLoop []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// C is the c argument value.
			C <-chan time.Time
		}
		// UpdateBuyer holds details about calls to the UpdateBuyer method.
		UpdateBuyer []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// BuyerID is the buyerID argument value.
			BuyerID uint64
			// Field is the field argument value.
			Field string
			// Value is the value argument value.
			Value interface{}
		}
		// UpdateCustomer holds details about calls to the UpdateCustomer method.
		UpdateCustomer []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// CustomerID is the customerID argument value.
			CustomerID string
			// Field is the field argument value.
			Field string
			// Value is the value argument value.
			Value interface{}
		}
		// UpdateInternalConfig holds details about calls to the UpdateInternalConfig method.
		UpdateInternalConfig []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// BuyerID is the buyerID argument value.
			BuyerID uint64
			// Field is the field argument value.
			Field string
			// Value is the value argument value.
			Value interface{}
		}
		// UpdateRelay holds details about calls to the UpdateRelay method.
		UpdateRelay []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// RelayID is the relayID argument value.
			RelayID uint64
			// Field is the field argument value.
			Field string
			// Value is the value argument value.
			Value interface{}
		}
		// UpdateRouteShader holds details about calls to the UpdateRouteShader method.
		UpdateRouteShader []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// BuyerID is the buyerID argument value.
			BuyerID uint64
			// Field is the field argument value.
			Field string
			// Value is the value argument value.
			Value interface{}
		}
		// UpdateSeller holds details about calls to the UpdateSeller method.
		UpdateSeller []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// SellerID is the sellerID argument value.
			SellerID string
			// Field is the field argument value.
			Field string
			// Value is the value argument value.
			Value interface{}
		}
	}
}

// AddBannedUser calls AddBannedUserFunc.
func (mock *StorerMock) AddBannedUser(ctx context.Context, buyerID uint64, userID uint64) error {
	if mock.AddBannedUserFunc == nil {
		panic("StorerMock.AddBannedUserFunc: method is nil but Storer.AddBannedUser was just called")
	}
	callInfo := struct {
		Ctx     context.Context
		BuyerID uint64
		UserID  uint64
	}{
		Ctx:     ctx,
		BuyerID: buyerID,
		UserID:  userID,
	}
	lockStorerMockAddBannedUser.Lock()
	mock.calls.AddBannedUser = append(mock.calls.AddBannedUser, callInfo)
	lockStorerMockAddBannedUser.Unlock()
	return mock.AddBannedUserFunc(ctx, buyerID, userID)
}

// AddBannedUserCalls gets all the calls that were made to AddBannedUser.
// Check the length with:
//     len(mockedStorer.AddBannedUserCalls())
func (mock *StorerMock) AddBannedUserCalls() []struct {
	Ctx     context.Context
	BuyerID uint64
	UserID  uint64
} {
	var calls []struct {
		Ctx     context.Context
		BuyerID uint64
		UserID  uint64
	}
	lockStorerMockAddBannedUser.RLock()
	calls = mock.calls.AddBannedUser
	lockStorerMockAddBannedUser.RUnlock()
	return calls
}

// AddBuyer calls AddBuyerFunc.
func (mock *StorerMock) AddBuyer(ctx context.Context, buyer routing.Buyer) error {
	if mock.AddBuyerFunc == nil {
		panic("StorerMock.AddBuyerFunc: method is nil but Storer.AddBuyer was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Buyer routing.Buyer
	}{
		Ctx:   ctx,
		Buyer: buyer,
	}
	lockStorerMockAddBuyer.Lock()
	mock.calls.AddBuyer = append(mock.calls.AddBuyer, callInfo)
	lockStorerMockAddBuyer.Unlock()
	return mock.AddBuyerFunc(ctx, buyer)
}

// AddBuyerCalls gets all the calls that were made to AddBuyer.
// Check the length with:
//     len(mockedStorer.AddBuyerCalls())
func (mock *StorerMock) AddBuyerCalls() []struct {
	Ctx   context.Context
	Buyer routing.Buyer
} {
	var calls []struct {
		Ctx   context.Context
		Buyer routing.Buyer
	}
	lockStorerMockAddBuyer.RLock()
	calls = mock.calls.AddBuyer
	lockStorerMockAddBuyer.RUnlock()
	return calls
}

// AddCustomer calls AddCustomerFunc.
func (mock *StorerMock) AddCustomer(ctx context.Context, customer routing.Customer) error {
	if mock.AddCustomerFunc == nil {
		panic("StorerMock.AddCustomerFunc: method is nil but Storer.AddCustomer was just called")
	}
	callInfo := struct {
		Ctx      context.Context
		Customer routing.Customer
	}{
		Ctx:      ctx,
		Customer: customer,
	}
	lockStorerMockAddCustomer.Lock()
	mock.calls.AddCustomer = append(mock.calls.AddCustomer, callInfo)
	lockStorerMockAddCustomer.Unlock()
	return mock.AddCustomerFunc(ctx, customer)
}

// AddCustomerCalls gets all the calls that were made to AddCustomer.
// Check the length with:
//     len(mockedStorer.AddCustomerCalls())
func (mock *StorerMock) AddCustomerCalls() []struct {
	Ctx      context.Context
	Customer routing.Customer
} {
	var calls []struct {
		Ctx      context.Context
		Customer routing.Customer
	}
	lockStorerMockAddCustomer.RLock()
	calls = mock.calls.AddCustomer
	lockStorerMockAddCustomer.RUnlock()
	return calls
}

// AddDatacenter calls AddDatacenterFunc.
func (mock *StorerMock) AddDatacenter(ctx context.Context, datacenter routing.Datacenter) error {
	if mock.AddDatacenterFunc == nil {
		panic("StorerMock.AddDatacenterFunc: method is nil but Storer.AddDatacenter was just called")
	}
	callInfo := struct {
		Ctx        context.Context
		Datacenter routing.Datacenter
	}{
		Ctx:        ctx,
		Datacenter: datacenter,
	}
	lockStorerMockAddDatacenter.Lock()
	mock.calls.AddDatacenter = append(mock.calls.AddDatacenter, callInfo)
	lockStorerMockAddDatacenter.Unlock()
	return mock.AddDatacenterFunc(ctx, datacenter)
}

// AddDatacenterCalls gets all the calls that were made to AddDatacenter.
// Check the length with:
//     len(mockedStorer.AddDatacenterCalls())
func (mock *StorerMock) AddDatacenterCalls() []struct {
	Ctx        context.Context
	Datacenter routing.Datacenter
} {
	var calls []struct {
		Ctx        context.Context
		Datacenter routing.Datacenter
	}
	lockStorerMockAddDatacenter.RLock()
	calls = mock.calls.AddDatacenter
	lockStorerMockAddDatacenter.RUnlock()
	return calls
}

// AddDatacenterMap calls AddDatacenterMapFunc.
func (mock *StorerMock) AddDatacenterMap(ctx context.Context, dcMap routing.DatacenterMap) error {
	if mock.AddDatacenterMapFunc == nil {
		panic("StorerMock.AddDatacenterMapFunc: method is nil but Storer.AddDatacenterMap was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		DcMap routing.DatacenterMap
	}{
		Ctx:   ctx,
		DcMap: dcMap,
	}
	lockStorerMockAddDatacenterMap.Lock()
	mock.calls.AddDatacenterMap = append(mock.calls.AddDatacenterMap, callInfo)
	lockStorerMockAddDatacenterMap.Unlock()
	return mock.AddDatacenterMapFunc(ctx, dcMap)
}

// AddDatacenterMapCalls gets all the calls that were made to AddDatacenterMap.
// Check the length with:
//     len(mockedStorer.AddDatacenterMapCalls())
func (mock *StorerMock) AddDatacenterMapCalls() []struct {
	Ctx   context.Context
	DcMap routing.DatacenterMap
} {
	var calls []struct {
		Ctx   context.Context
		DcMap routing.DatacenterMap
	}
	lockStorerMockAddDatacenterMap.RLock()
	calls = mock.calls.AddDatacenterMap
	lockStorerMockAddDatacenterMap.RUnlock()
	return calls
}

// AddInternalConfig calls AddInternalConfigFunc.
func (mock *StorerMock) AddInternalConfig(ctx context.Context, internalConfig core.InternalConfig, buyerID uint64) error {
	if mock.AddInternalConfigFunc == nil {
		panic("StorerMock.AddInternalConfigFunc: method is nil but Storer.AddInternalConfig was just called")
	}
	callInfo := struct {
		Ctx            context.Context
		InternalConfig core.InternalConfig
		BuyerID        uint64
	}{
		Ctx:            ctx,
		InternalConfig: internalConfig,
		BuyerID:        buyerID,
	}
	lockStorerMockAddInternalConfig.Lock()
	mock.calls.AddInternalConfig = append(mock.calls.AddInternalConfig, callInfo)
	lockStorerMockAddInternalConfig.Unlock()
	return mock.AddInternalConfigFunc(ctx, internalConfig, buyerID)
}

// AddInternalConfigCalls gets all the calls that were made to AddInternalConfig.
// Check the length with:
//     len(mockedStorer.AddInternalConfigCalls())
func (mock *StorerMock) AddInternalConfigCalls() []struct {
	Ctx            context.Context
	InternalConfig core.InternalConfig
	BuyerID        uint64
} {
	var calls []struct {
		Ctx            context.Context
		InternalConfig core.InternalConfig
		BuyerID        uint64
	}
	lockStorerMockAddInternalConfig.RLock()
	calls = mock.calls.AddInternalConfig
	lockStorerMockAddInternalConfig.RUnlock()
	return calls
}

// AddRelay calls AddRelayFunc.
func (mock *StorerMock) AddRelay(ctx context.Context, relay routing.Relay) error {
	if mock.AddRelayFunc == nil {
		panic("StorerMock.AddRelayFunc: method is nil but Storer.AddRelay was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Relay routing.Relay
	}{
		Ctx:   ctx,
		Relay: relay,
	}
	lockStorerMockAddRelay.Lock()
	mock.calls.AddRelay = append(mock.calls.AddRelay, callInfo)
	lockStorerMockAddRelay.Unlock()
	return mock.AddRelayFunc(ctx, relay)
}

// AddRelayCalls gets all the calls that were made to AddRelay.
// Check the length with:
//     len(mockedStorer.AddRelayCalls())
func (mock *StorerMock) AddRelayCalls() []struct {
	Ctx   context.Context
	Relay routing.Relay
} {
	var calls []struct {
		Ctx   context.Context
		Relay routing.Relay
	}
	lockStorerMockAddRelay.RLock()
	calls = mock.calls.AddRelay
	lockStorerMockAddRelay.RUnlock()
	return calls
}

// AddRouteShader calls AddRouteShaderFunc.
func (mock *StorerMock) AddRouteShader(ctx context.Context, routeShader core.RouteShader, buyerID uint64) error {
	if mock.AddRouteShaderFunc == nil {
		panic("StorerMock.AddRouteShaderFunc: method is nil but Storer.AddRouteShader was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		RouteShader core.RouteShader
		BuyerID     uint64
	}{
		Ctx:         ctx,
		RouteShader: routeShader,
		BuyerID:     buyerID,
	}
	lockStorerMockAddRouteShader.Lock()
	mock.calls.AddRouteShader = append(mock.calls.AddRouteShader, callInfo)
	lockStorerMockAddRouteShader.Unlock()
	return mock.AddRouteShaderFunc(ctx, routeShader, buyerID)
}

// AddRouteShaderCalls gets all the calls that were made to AddRouteShader.
// Check the length with:
//     len(mockedStorer.AddRouteShaderCalls())
func (mock *StorerMock) AddRouteShaderCalls() []struct {
	Ctx         context.Context
	RouteShader core.RouteShader
	BuyerID     uint64
} {
	var calls []struct {
		Ctx         context.Context
		RouteShader core.RouteShader
		BuyerID     uint64
	}
	lockStorerMockAddRouteShader.RLock()
	calls = mock.calls.AddRouteShader
	lockStorerMockAddRouteShader.RUnlock()
	return calls
}

// AddSeller calls AddSellerFunc.
func (mock *StorerMock) AddSeller(ctx context.Context, seller routing.Seller) error {
	if mock.AddSellerFunc == nil {
		panic("StorerMock.AddSellerFunc: method is nil but Storer.AddSeller was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Seller routing.Seller
	}{
		Ctx:    ctx,
		Seller: seller,
	}
	lockStorerMockAddSeller.Lock()
	mock.calls.AddSeller = append(mock.calls.AddSeller, callInfo)
	lockStorerMockAddSeller.Unlock()
	return mock.AddSellerFunc(ctx, seller)
}

// AddSellerCalls gets all the calls that were made to AddSeller.
// Check the length with:
//     len(mockedStorer.AddSellerCalls())
func (mock *StorerMock) AddSellerCalls() []struct {
	Ctx    context.Context
	Seller routing.Seller
} {
	var calls []struct {
		Ctx    context.Context
		Seller routing.Seller
	}
	lockStorerMockAddSeller.RLock()
	calls = mock.calls.AddSeller
	lockStorerMockAddSeller.RUnlock()
	return calls
}

// BannedUsers calls BannedUsersFunc.
func (mock *StorerMock) BannedUsers(buyerID uint64) (map[uint64]bool, error) {
	if mock.BannedUsersFunc == nil {
		panic("StorerMock.BannedUsersFunc: method is nil but Storer.BannedUsers was just called")
	}
	callInfo := struct {
		BuyerID uint64
	}{
		BuyerID: buyerID,
	}
	lockStorerMockBannedUsers.Lock()
	mock.calls.BannedUsers = append(mock.calls.BannedUsers, callInfo)
	lockStorerMockBannedUsers.Unlock()
	return mock.BannedUsersFunc(buyerID)
}

// BannedUsersCalls gets all the calls that were made to BannedUsers.
// Check the length with:
//     len(mockedStorer.BannedUsersCalls())
func (mock *StorerMock) BannedUsersCalls() []struct {
	BuyerID uint64
} {
	var calls []struct {
		BuyerID uint64
	}
	lockStorerMockBannedUsers.RLock()
	calls = mock.calls.BannedUsers
	lockStorerMockBannedUsers.RUnlock()
	return calls
}

// Buyer calls BuyerFunc.
func (mock *StorerMock) Buyer(id uint64) (routing.Buyer, error) {
	if mock.BuyerFunc == nil {
		panic("StorerMock.BuyerFunc: method is nil but Storer.Buyer was just called")
	}
	callInfo := struct {
		ID uint64
	}{
		ID: id,
	}
	lockStorerMockBuyer.Lock()
	mock.calls.Buyer = append(mock.calls.Buyer, callInfo)
	lockStorerMockBuyer.Unlock()
	return mock.BuyerFunc(id)
}

// BuyerCalls gets all the calls that were made to Buyer.
// Check the length with:
//     len(mockedStorer.BuyerCalls())
func (mock *StorerMock) BuyerCalls() []struct {
	ID uint64
} {
	var calls []struct {
		ID uint64
	}
	lockStorerMockBuyer.RLock()
	calls = mock.calls.Buyer
	lockStorerMockBuyer.RUnlock()
	return calls
}

// BuyerIDFromCustomerName calls BuyerIDFromCustomerNameFunc.
func (mock *StorerMock) BuyerIDFromCustomerName(ctx context.Context, customerName string) (uint64, error) {
	if mock.BuyerIDFromCustomerNameFunc == nil {
		panic("StorerMock.BuyerIDFromCustomerNameFunc: method is nil but Storer.BuyerIDFromCustomerName was just called")
	}
	callInfo := struct {
		Ctx          context.Context
		CustomerName string
	}{
		Ctx:          ctx,
		CustomerName: customerName,
	}
	lockStorerMockBuyerIDFromCustomerName.Lock()
	mock.calls.BuyerIDFromCustomerName = append(mock.calls.BuyerIDFromCustomerName, callInfo)
	lockStorerMockBuyerIDFromCustomerName.Unlock()
	return mock.BuyerIDFromCustomerNameFunc(ctx, customerName)
}

// BuyerIDFromCustomerNameCalls gets all the calls that were made to BuyerIDFromCustomerName.
// Check the length with:
//     len(mockedStorer.BuyerIDFromCustomerNameCalls())
func (mock *StorerMock) BuyerIDFromCustomerNameCalls() []struct {
	Ctx          context.Context
	CustomerName string
} {
	var calls []struct {
		Ctx          context.Context
		CustomerName string
	}
	lockStorerMockBuyerIDFromCustomerName.RLock()
	calls = mock.calls.BuyerIDFromCustomerName
	lockStorerMockBuyerIDFromCustomerName.RUnlock()
	return calls
}

// BuyerWithCompanyCode calls BuyerWithCompanyCodeFunc.
func (mock *StorerMock) BuyerWithCompanyCode(code string) (routing.Buyer, error) {
	if mock.BuyerWithCompanyCodeFunc == nil {
		panic("StorerMock.BuyerWithCompanyCodeFunc: method is nil but Storer.BuyerWithCompanyCode was just called")
	}
	callInfo := struct {
		Code string
	}{
		Code: code,
	}
	lockStorerMockBuyerWithCompanyCode.Lock()
	mock.calls.BuyerWithCompanyCode = append(mock.calls.BuyerWithCompanyCode, callInfo)
	lockStorerMockBuyerWithCompanyCode.Unlock()
	return mock.BuyerWithCompanyCodeFunc(code)
}

// BuyerWithCompanyCodeCalls gets all the calls that were made to BuyerWithCompanyCode.
// Check the length with:
//     len(mockedStorer.BuyerWithCompanyCodeCalls())
func (mock *StorerMock) BuyerWithCompanyCodeCalls() []struct {
	Code string
} {
	var calls []struct {
		Code string
	}
	lockStorerMockBuyerWithCompanyCode.RLock()
	calls = mock.calls.BuyerWithCompanyCode
	lockStorerMockBuyerWithCompanyCode.RUnlock()
	return calls
}

// Buyers calls BuyersFunc.
func (mock *StorerMock) Buyers() []routing.Buyer {
	if mock.BuyersFunc == nil {
		panic("StorerMock.BuyersFunc: method is nil but Storer.Buyers was just called")
	}
	callInfo := struct {
	}{}
	lockStorerMockBuyers.Lock()
	mock.calls.Buyers = append(mock.calls.Buyers, callInfo)
	lockStorerMockBuyers.Unlock()
	return mock.BuyersFunc()
}

// BuyersCalls gets all the calls that were made to Buyers.
// Check the length with:
//     len(mockedStorer.BuyersCalls())
func (mock *StorerMock) BuyersCalls() []struct {
} {
	var calls []struct {
	}
	lockStorerMockBuyers.RLock()
	calls = mock.calls.Buyers
	lockStorerMockBuyers.RUnlock()
	return calls
}

// CheckSequenceNumber calls CheckSequenceNumberFunc.
func (mock *StorerMock) CheckSequenceNumber(ctx context.Context) (bool, int64, error) {
	if mock.CheckSequenceNumberFunc == nil {
		panic("StorerMock.CheckSequenceNumberFunc: method is nil but Storer.CheckSequenceNumber was just called")
	}
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	lockStorerMockCheckSequenceNumber.Lock()
	mock.calls.CheckSequenceNumber = append(mock.calls.CheckSequenceNumber, callInfo)
	lockStorerMockCheckSequenceNumber.Unlock()
	return mock.CheckSequenceNumberFunc(ctx)
}

// CheckSequenceNumberCalls gets all the calls that were made to CheckSequenceNumber.
// Check the length with:
//     len(mockedStorer.CheckSequenceNumberCalls())
func (mock *StorerMock) CheckSequenceNumberCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	lockStorerMockCheckSequenceNumber.RLock()
	calls = mock.calls.CheckSequenceNumber
	lockStorerMockCheckSequenceNumber.RUnlock()
	return calls
}

// Customer calls CustomerFunc.
func (mock *StorerMock) Customer(code string) (routing.Customer, error) {
	if mock.CustomerFunc == nil {
		panic("StorerMock.CustomerFunc: method is nil but Storer.Customer was just called")
	}
	callInfo := struct {
		Code string
	}{
		Code: code,
	}
	lockStorerMockCustomer.Lock()
	mock.calls.Customer = append(mock.calls.Customer, callInfo)
	lockStorerMockCustomer.Unlock()
	return mock.CustomerFunc(code)
}

// CustomerCalls gets all the calls that were made to Customer.
// Check the length with:
//     len(mockedStorer.CustomerCalls())
func (mock *StorerMock) CustomerCalls() []struct {
	Code string
} {
	var calls []struct {
		Code string
	}
	lockStorerMockCustomer.RLock()
	calls = mock.calls.Customer
	lockStorerMockCustomer.RUnlock()
	return calls
}

// CustomerWithName calls CustomerWithNameFunc.
func (mock *StorerMock) CustomerWithName(name string) (routing.Customer, error) {
	if mock.CustomerWithNameFunc == nil {
		panic("StorerMock.CustomerWithNameFunc: method is nil but Storer.CustomerWithName was just called")
	}
	callInfo := struct {
		Name string
	}{
		Name: name,
	}
	lockStorerMockCustomerWithName.Lock()
	mock.calls.CustomerWithName = append(mock.calls.CustomerWithName, callInfo)
	lockStorerMockCustomerWithName.Unlock()
	return mock.CustomerWithNameFunc(name)
}

// CustomerWithNameCalls gets all the calls that were made to CustomerWithName.
// Check the length with:
//     len(mockedStorer.CustomerWithNameCalls())
func (mock *StorerMock) CustomerWithNameCalls() []struct {
	Name string
} {
	var calls []struct {
		Name string
	}
	lockStorerMockCustomerWithName.RLock()
	calls = mock.calls.CustomerWithName
	lockStorerMockCustomerWithName.RUnlock()
	return calls
}

// Customers calls CustomersFunc.
func (mock *StorerMock) Customers() []routing.Customer {
	if mock.CustomersFunc == nil {
		panic("StorerMock.CustomersFunc: method is nil but Storer.Customers was just called")
	}
	callInfo := struct {
	}{}
	lockStorerMockCustomers.Lock()
	mock.calls.Customers = append(mock.calls.Customers, callInfo)
	lockStorerMockCustomers.Unlock()
	return mock.CustomersFunc()
}

// CustomersCalls gets all the calls that were made to Customers.
// Check the length with:
//     len(mockedStorer.CustomersCalls())
func (mock *StorerMock) CustomersCalls() []struct {
} {
	var calls []struct {
	}
	lockStorerMockCustomers.RLock()
	calls = mock.calls.Customers
	lockStorerMockCustomers.RUnlock()
	return calls
}

// Datacenter calls DatacenterFunc.
func (mock *StorerMock) Datacenter(datacenterID uint64) (routing.Datacenter, error) {
	if mock.DatacenterFunc == nil {
		panic("StorerMock.DatacenterFunc: method is nil but Storer.Datacenter was just called")
	}
	callInfo := struct {
		DatacenterID uint64
	}{
		DatacenterID: datacenterID,
	}
	lockStorerMockDatacenter.Lock()
	mock.calls.Datacenter = append(mock.calls.Datacenter, callInfo)
	lockStorerMockDatacenter.Unlock()
	return mock.DatacenterFunc(datacenterID)
}

// DatacenterCalls gets all the calls that were made to Datacenter.
// Check the length with:
//     len(mockedStorer.DatacenterCalls())
func (mock *StorerMock) DatacenterCalls() []struct {
	DatacenterID uint64
} {
	var calls []struct {
		DatacenterID uint64
	}
	lockStorerMockDatacenter.RLock()
	calls = mock.calls.Datacenter
	lockStorerMockDatacenter.RUnlock()
	return calls
}

// Datacenters calls DatacentersFunc.
func (mock *StorerMock) Datacenters() []routing.Datacenter {
	if mock.DatacentersFunc == nil {
		panic("StorerMock.DatacentersFunc: method is nil but Storer.Datacenters was just called")
	}
	callInfo := struct {
	}{}
	lockStorerMockDatacenters.Lock()
	mock.calls.Datacenters = append(mock.calls.Datacenters, callInfo)
	lockStorerMockDatacenters.Unlock()
	return mock.DatacentersFunc()
}

// DatacentersCalls gets all the calls that were made to Datacenters.
// Check the length with:
//     len(mockedStorer.DatacentersCalls())
func (mock *StorerMock) DatacentersCalls() []struct {
} {
	var calls []struct {
	}
	lockStorerMockDatacenters.RLock()
	calls = mock.calls.Datacenters
	lockStorerMockDatacenters.RUnlock()
	return calls
}

// GetDatacenterMapsForBuyer calls GetDatacenterMapsForBuyerFunc.
func (mock *StorerMock) GetDatacenterMapsForBuyer(buyerID uint64) map[uint64]routing.DatacenterMap {
	if mock.GetDatacenterMapsForBuyerFunc == nil {
		panic("StorerMock.GetDatacenterMapsForBuyerFunc: method is nil but Storer.GetDatacenterMapsForBuyer was just called")
	}
	callInfo := struct {
		BuyerID uint64
	}{
		BuyerID: buyerID,
	}
	lockStorerMockGetDatacenterMapsForBuyer.Lock()
	mock.calls.GetDatacenterMapsForBuyer = append(mock.calls.GetDatacenterMapsForBuyer, callInfo)
	lockStorerMockGetDatacenterMapsForBuyer.Unlock()
	return mock.GetDatacenterMapsForBuyerFunc(buyerID)
}

// GetDatacenterMapsForBuyerCalls gets all the calls that were made to GetDatacenterMapsForBuyer.
// Check the length with:
//     len(mockedStorer.GetDatacenterMapsForBuyerCalls())
func (mock *StorerMock) GetDatacenterMapsForBuyerCalls() []struct {
	BuyerID uint64
} {
	var calls []struct {
		BuyerID uint64
	}
	lockStorerMockGetDatacenterMapsForBuyer.RLock()
	calls = mock.calls.GetDatacenterMapsForBuyer
	lockStorerMockGetDatacenterMapsForBuyer.RUnlock()
	return calls
}

// GetFeatureFlagByName calls GetFeatureFlagByNameFunc.
func (mock *StorerMock) GetFeatureFlagByName(flagName string) (map[string]bool, error) {
	if mock.GetFeatureFlagByNameFunc == nil {
		panic("StorerMock.GetFeatureFlagByNameFunc: method is nil but Storer.GetFeatureFlagByName was just called")
	}
	callInfo := struct {
		FlagName string
	}{
		FlagName: flagName,
	}
	lockStorerMockGetFeatureFlagByName.Lock()
	mock.calls.GetFeatureFlagByName = append(mock.calls.GetFeatureFlagByName, callInfo)
	lockStorerMockGetFeatureFlagByName.Unlock()
	return mock.GetFeatureFlagByNameFunc(flagName)
}

// GetFeatureFlagByNameCalls gets all the calls that were made to GetFeatureFlagByName.
// Check the length with:
//     len(mockedStorer.GetFeatureFlagByNameCalls())
func (mock *StorerMock) GetFeatureFlagByNameCalls() []struct {
	FlagName string
} {
	var calls []struct {
		FlagName string
	}
	lockStorerMockGetFeatureFlagByName.RLock()
	calls = mock.calls.GetFeatureFlagByName
	lockStorerMockGetFeatureFlagByName.RUnlock()
	return calls
}

// GetFeatureFlags calls GetFeatureFlagsFunc.
func (mock *StorerMock) GetFeatureFlags() map[string]bool {
	if mock.GetFeatureFlagsFunc == nil {
		panic("StorerMock.GetFeatureFlagsFunc: method is nil but Storer.GetFeatureFlags was just called")
	}
	callInfo := struct {
	}{}
	lockStorerMockGetFeatureFlags.Lock()
	mock.calls.GetFeatureFlags = append(mock.calls.GetFeatureFlags, callInfo)
	lockStorerMockGetFeatureFlags.Unlock()
	return mock.GetFeatureFlagsFunc()
}

// GetFeatureFlagsCalls gets all the calls that were made to GetFeatureFlags.
// Check the length with:
//     len(mockedStorer.GetFeatureFlagsCalls())
func (mock *StorerMock) GetFeatureFlagsCalls() []struct {
} {
	var calls []struct {
	}
	lockStorerMockGetFeatureFlags.RLock()
	calls = mock.calls.GetFeatureFlags
	lockStorerMockGetFeatureFlags.RUnlock()
	return calls
}

// IncrementSequenceNumber calls IncrementSequenceNumberFunc.
func (mock *StorerMock) IncrementSequenceNumber(ctx context.Context) error {
	if mock.IncrementSequenceNumberFunc == nil {
		panic("StorerMock.IncrementSequenceNumberFunc: method is nil but Storer.IncrementSequenceNumber was just called")
	}
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	lockStorerMockIncrementSequenceNumber.Lock()
	mock.calls.IncrementSequenceNumber = append(mock.calls.IncrementSequenceNumber, callInfo)
	lockStorerMockIncrementSequenceNumber.Unlock()
	return mock.IncrementSequenceNumberFunc(ctx)
}

// IncrementSequenceNumberCalls gets all the calls that were made to IncrementSequenceNumber.
// Check the length with:
//     len(mockedStorer.IncrementSequenceNumberCalls())
func (mock *StorerMock) IncrementSequenceNumberCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	lockStorerMockIncrementSequenceNumber.RLock()
	calls = mock.calls.IncrementSequenceNumber
	lockStorerMockIncrementSequenceNumber.RUnlock()
	return calls
}

// InternalConfig calls InternalConfigFunc.
func (mock *StorerMock) InternalConfig(buyerID uint64) (core.InternalConfig, error) {
	if mock.InternalConfigFunc == nil {
		panic("StorerMock.InternalConfigFunc: method is nil but Storer.InternalConfig was just called")
	}
	callInfo := struct {
		BuyerID uint64
	}{
		BuyerID: buyerID,
	}
	lockStorerMockInternalConfig.Lock()
	mock.calls.InternalConfig = append(mock.calls.InternalConfig, callInfo)
	lockStorerMockInternalConfig.Unlock()
	return mock.InternalConfigFunc(buyerID)
}

// InternalConfigCalls gets all the calls that were made to InternalConfig.
// Check the length with:
//     len(mockedStorer.InternalConfigCalls())
func (mock *StorerMock) InternalConfigCalls() []struct {
	BuyerID uint64
} {
	var calls []struct {
		BuyerID uint64
	}
	lockStorerMockInternalConfig.RLock()
	calls = mock.calls.InternalConfig
	lockStorerMockInternalConfig.RUnlock()
	return calls
}

// ListDatacenterMaps calls ListDatacenterMapsFunc.
func (mock *StorerMock) ListDatacenterMaps(dcID uint64) map[uint64]routing.DatacenterMap {
	if mock.ListDatacenterMapsFunc == nil {
		panic("StorerMock.ListDatacenterMapsFunc: method is nil but Storer.ListDatacenterMaps was just called")
	}
	callInfo := struct {
		DcID uint64
	}{
		DcID: dcID,
	}
	lockStorerMockListDatacenterMaps.Lock()
	mock.calls.ListDatacenterMaps = append(mock.calls.ListDatacenterMaps, callInfo)
	lockStorerMockListDatacenterMaps.Unlock()
	return mock.ListDatacenterMapsFunc(dcID)
}

// ListDatacenterMapsCalls gets all the calls that were made to ListDatacenterMaps.
// Check the length with:
//     len(mockedStorer.ListDatacenterMapsCalls())
func (mock *StorerMock) ListDatacenterMapsCalls() []struct {
	DcID uint64
} {
	var calls []struct {
		DcID uint64
	}
	lockStorerMockListDatacenterMaps.RLock()
	calls = mock.calls.ListDatacenterMaps
	lockStorerMockListDatacenterMaps.RUnlock()
	return calls
}

// Relay calls RelayFunc.
func (mock *StorerMock) Relay(id uint64) (routing.Relay, error) {
	if mock.RelayFunc == nil {
		panic("StorerMock.RelayFunc: method is nil but Storer.Relay was just called")
	}
	callInfo := struct {
		ID uint64
	}{
		ID: id,
	}
	lockStorerMockRelay.Lock()
	mock.calls.Relay = append(mock.calls.Relay, callInfo)
	lockStorerMockRelay.Unlock()
	return mock.RelayFunc(id)
}

// RelayCalls gets all the calls that were made to Relay.
// Check the length with:
//     len(mockedStorer.RelayCalls())
func (mock *StorerMock) RelayCalls() []struct {
	ID uint64
} {
	var calls []struct {
		ID uint64
	}
	lockStorerMockRelay.RLock()
	calls = mock.calls.Relay
	lockStorerMockRelay.RUnlock()
	return calls
}

// Relays calls RelaysFunc.
func (mock *StorerMock) Relays() []routing.Relay {
	if mock.RelaysFunc == nil {
		panic("StorerMock.RelaysFunc: method is nil but Storer.Relays was just called")
	}
	callInfo := struct {
	}{}
	lockStorerMockRelays.Lock()
	mock.calls.Relays = append(mock.calls.Relays, callInfo)
	lockStorerMockRelays.Unlock()
	return mock.RelaysFunc()
}

// RelaysCalls gets all the calls that were made to Relays.
// Check the length with:
//     len(mockedStorer.RelaysCalls())
func (mock *StorerMock) RelaysCalls() []struct {
} {
	var calls []struct {
	}
	lockStorerMockRelays.RLock()
	calls = mock.calls.Relays
	lockStorerMockRelays.RUnlock()
	return calls
}

// RemoveBannedUser calls RemoveBannedUserFunc.
func (mock *StorerMock) RemoveBannedUser(ctx context.Context, buyerID uint64, userID uint64) error {
	if mock.RemoveBannedUserFunc == nil {
		panic("StorerMock.RemoveBannedUserFunc: method is nil but Storer.RemoveBannedUser was just called")
	}
	callInfo := struct {
		Ctx     context.Context
		BuyerID uint64
		UserID  uint64
	}{
		Ctx:     ctx,
		BuyerID: buyerID,
		UserID:  userID,
	}
	lockStorerMockRemoveBannedUser.Lock()
	mock.calls.RemoveBannedUser = append(mock.calls.RemoveBannedUser, callInfo)
	lockStorerMockRemoveBannedUser.Unlock()
	return mock.RemoveBannedUserFunc(ctx, buyerID, userID)
}

// RemoveBannedUserCalls gets all the calls that were made to RemoveBannedUser.
// Check the length with:
//     len(mockedStorer.RemoveBannedUserCalls())
func (mock *StorerMock) RemoveBannedUserCalls() []struct {
	Ctx     context.Context
	BuyerID uint64
	UserID  uint64
} {
	var calls []struct {
		Ctx     context.Context
		BuyerID uint64
		UserID  uint64
	}
	lockStorerMockRemoveBannedUser.RLock()
	calls = mock.calls.RemoveBannedUser
	lockStorerMockRemoveBannedUser.RUnlock()
	return calls
}

// RemoveBuyer calls RemoveBuyerFunc.
func (mock *StorerMock) RemoveBuyer(ctx context.Context, id uint64) error {
	if mock.RemoveBuyerFunc == nil {
		panic("StorerMock.RemoveBuyerFunc: method is nil but Storer.RemoveBuyer was just called")
	}
	callInfo := struct {
		Ctx context.Context
		ID  uint64
	}{
		Ctx: ctx,
		ID:  id,
	}
	lockStorerMockRemoveBuyer.Lock()
	mock.calls.RemoveBuyer = append(mock.calls.RemoveBuyer, callInfo)
	lockStorerMockRemoveBuyer.Unlock()
	return mock.RemoveBuyerFunc(ctx, id)
}

// RemoveBuyerCalls gets all the calls that were made to RemoveBuyer.
// Check the length with:
//     len(mockedStorer.RemoveBuyerCalls())
func (mock *StorerMock) RemoveBuyerCalls() []struct {
	Ctx context.Context
	ID  uint64
} {
	var calls []struct {
		Ctx context.Context
		ID  uint64
	}
	lockStorerMockRemoveBuyer.RLock()
	calls = mock.calls.RemoveBuyer
	lockStorerMockRemoveBuyer.RUnlock()
	return calls
}

// RemoveCustomer calls RemoveCustomerFunc.
func (mock *StorerMock) RemoveCustomer(ctx context.Context, code string) error {
	if mock.RemoveCustomerFunc == nil {
		panic("StorerMock.RemoveCustomerFunc: method is nil but Storer.RemoveCustomer was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		Code string
	}{
		Ctx:  ctx,
		Code: code,
	}
	lockStorerMockRemoveCustomer.Lock()
	mock.calls.RemoveCustomer = append(mock.calls.RemoveCustomer, callInfo)
	lockStorerMockRemoveCustomer.Unlock()
	return mock.RemoveCustomerFunc(ctx, code)
}

// RemoveCustomerCalls gets all the calls that were made to RemoveCustomer.
// Check the length with:
//     len(mockedStorer.RemoveCustomerCalls())
func (mock *StorerMock) RemoveCustomerCalls() []struct {
	Ctx  context.Context
	Code string
} {
	var calls []struct {
		Ctx  context.Context
		Code string
	}
	lockStorerMockRemoveCustomer.RLock()
	calls = mock.calls.RemoveCustomer
	lockStorerMockRemoveCustomer.RUnlock()
	return calls
}

// RemoveDatacenter calls RemoveDatacenterFunc.
func (mock *StorerMock) RemoveDatacenter(ctx context.Context, id uint64) error {
	if mock.RemoveDatacenterFunc == nil {
		panic("StorerMock.RemoveDatacenterFunc: method is nil but Storer.RemoveDatacenter was just called")
	}
	callInfo := struct {
		Ctx context.Context
		ID  uint64
	}{
		Ctx: ctx,
		ID:  id,
	}
	lockStorerMockRemoveDatacenter.Lock()
	mock.calls.RemoveDatacenter = append(mock.calls.RemoveDatacenter, callInfo)
	lockStorerMockRemoveDatacenter.Unlock()
	return mock.RemoveDatacenterFunc(ctx, id)
}

// RemoveDatacenterCalls gets all the calls that were made to RemoveDatacenter.
// Check the length with:
//     len(mockedStorer.RemoveDatacenterCalls())
func (mock *StorerMock) RemoveDatacenterCalls() []struct {
	Ctx context.Context
	ID  uint64
} {
	var calls []struct {
		Ctx context.Context
		ID  uint64
	}
	lockStorerMockRemoveDatacenter.RLock()
	calls = mock.calls.RemoveDatacenter
	lockStorerMockRemoveDatacenter.RUnlock()
	return calls
}

// RemoveDatacenterMap calls RemoveDatacenterMapFunc.
func (mock *StorerMock) RemoveDatacenterMap(ctx context.Context, dcMap routing.DatacenterMap) error {
	if mock.RemoveDatacenterMapFunc == nil {
		panic("StorerMock.RemoveDatacenterMapFunc: method is nil but Storer.RemoveDatacenterMap was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		DcMap routing.DatacenterMap
	}{
		Ctx:   ctx,
		DcMap: dcMap,
	}
	lockStorerMockRemoveDatacenterMap.Lock()
	mock.calls.RemoveDatacenterMap = append(mock.calls.RemoveDatacenterMap, callInfo)
	lockStorerMockRemoveDatacenterMap.Unlock()
	return mock.RemoveDatacenterMapFunc(ctx, dcMap)
}

// RemoveDatacenterMapCalls gets all the calls that were made to RemoveDatacenterMap.
// Check the length with:
//     len(mockedStorer.RemoveDatacenterMapCalls())
func (mock *StorerMock) RemoveDatacenterMapCalls() []struct {
	Ctx   context.Context
	DcMap routing.DatacenterMap
} {
	var calls []struct {
		Ctx   context.Context
		DcMap routing.DatacenterMap
	}
	lockStorerMockRemoveDatacenterMap.RLock()
	calls = mock.calls.RemoveDatacenterMap
	lockStorerMockRemoveDatacenterMap.RUnlock()
	return calls
}

// RemoveFeatureFlagByName calls RemoveFeatureFlagByNameFunc.
func (mock *StorerMock) RemoveFeatureFlagByName(ctx context.Context, flagName string) error {
	if mock.RemoveFeatureFlagByNameFunc == nil {
		panic("StorerMock.RemoveFeatureFlagByNameFunc: method is nil but Storer.RemoveFeatureFlagByName was just called")
	}
	callInfo := struct {
		Ctx      context.Context
		FlagName string
	}{
		Ctx:      ctx,
		FlagName: flagName,
	}
	lockStorerMockRemoveFeatureFlagByName.Lock()
	mock.calls.RemoveFeatureFlagByName = append(mock.calls.RemoveFeatureFlagByName, callInfo)
	lockStorerMockRemoveFeatureFlagByName.Unlock()
	return mock.RemoveFeatureFlagByNameFunc(ctx, flagName)
}

// RemoveFeatureFlagByNameCalls gets all the calls that were made to RemoveFeatureFlagByName.
// Check the length with:
//     len(mockedStorer.RemoveFeatureFlagByNameCalls())
func (mock *StorerMock) RemoveFeatureFlagByNameCalls() []struct {
	Ctx      context.Context
	FlagName string
} {
	var calls []struct {
		Ctx      context.Context
		FlagName string
	}
	lockStorerMockRemoveFeatureFlagByName.RLock()
	calls = mock.calls.RemoveFeatureFlagByName
	lockStorerMockRemoveFeatureFlagByName.RUnlock()
	return calls
}

// RemoveInternalConfig calls RemoveInternalConfigFunc.
func (mock *StorerMock) RemoveInternalConfig(ctx context.Context, buyerID uint64) error {
	if mock.RemoveInternalConfigFunc == nil {
		panic("StorerMock.RemoveInternalConfigFunc: method is nil but Storer.RemoveInternalConfig was just called")
	}
	callInfo := struct {
		Ctx     context.Context
		BuyerID uint64
	}{
		Ctx:     ctx,
		BuyerID: buyerID,
	}
	lockStorerMockRemoveInternalConfig.Lock()
	mock.calls.RemoveInternalConfig = append(mock.calls.RemoveInternalConfig, callInfo)
	lockStorerMockRemoveInternalConfig.Unlock()
	return mock.RemoveInternalConfigFunc(ctx, buyerID)
}

// RemoveInternalConfigCalls gets all the calls that were made to RemoveInternalConfig.
// Check the length with:
//     len(mockedStorer.RemoveInternalConfigCalls())
func (mock *StorerMock) RemoveInternalConfigCalls() []struct {
	Ctx     context.Context
	BuyerID uint64
} {
	var calls []struct {
		Ctx     context.Context
		BuyerID uint64
	}
	lockStorerMockRemoveInternalConfig.RLock()
	calls = mock.calls.RemoveInternalConfig
	lockStorerMockRemoveInternalConfig.RUnlock()
	return calls
}

// RemoveRelay calls RemoveRelayFunc.
func (mock *StorerMock) RemoveRelay(ctx context.Context, id uint64) error {
	if mock.RemoveRelayFunc == nil {
		panic("StorerMock.RemoveRelayFunc: method is nil but Storer.RemoveRelay was just called")
	}
	callInfo := struct {
		Ctx context.Context
		ID  uint64
	}{
		Ctx: ctx,
		ID:  id,
	}
	lockStorerMockRemoveRelay.Lock()
	mock.calls.RemoveRelay = append(mock.calls.RemoveRelay, callInfo)
	lockStorerMockRemoveRelay.Unlock()
	return mock.RemoveRelayFunc(ctx, id)
}

// RemoveRelayCalls gets all the calls that were made to RemoveRelay.
// Check the length with:
//     len(mockedStorer.RemoveRelayCalls())
func (mock *StorerMock) RemoveRelayCalls() []struct {
	Ctx context.Context
	ID  uint64
} {
	var calls []struct {
		Ctx context.Context
		ID  uint64
	}
	lockStorerMockRemoveRelay.RLock()
	calls = mock.calls.RemoveRelay
	lockStorerMockRemoveRelay.RUnlock()
	return calls
}

// RemoveRouteShader calls RemoveRouteShaderFunc.
func (mock *StorerMock) RemoveRouteShader(ctx context.Context, buyerID uint64) error {
	if mock.RemoveRouteShaderFunc == nil {
		panic("StorerMock.RemoveRouteShaderFunc: method is nil but Storer.RemoveRouteShader was just called")
	}
	callInfo := struct {
		Ctx     context.Context
		BuyerID uint64
	}{
		Ctx:     ctx,
		BuyerID: buyerID,
	}
	lockStorerMockRemoveRouteShader.Lock()
	mock.calls.RemoveRouteShader = append(mock.calls.RemoveRouteShader, callInfo)
	lockStorerMockRemoveRouteShader.Unlock()
	return mock.RemoveRouteShaderFunc(ctx, buyerID)
}

// RemoveRouteShaderCalls gets all the calls that were made to RemoveRouteShader.
// Check the length with:
//     len(mockedStorer.RemoveRouteShaderCalls())
func (mock *StorerMock) RemoveRouteShaderCalls() []struct {
	Ctx     context.Context
	BuyerID uint64
} {
	var calls []struct {
		Ctx     context.Context
		BuyerID uint64
	}
	lockStorerMockRemoveRouteShader.RLock()
	calls = mock.calls.RemoveRouteShader
	lockStorerMockRemoveRouteShader.RUnlock()
	return calls
}

// RemoveSeller calls RemoveSellerFunc.
func (mock *StorerMock) RemoveSeller(ctx context.Context, id string) error {
	if mock.RemoveSellerFunc == nil {
		panic("StorerMock.RemoveSellerFunc: method is nil but Storer.RemoveSeller was just called")
	}
	callInfo := struct {
		Ctx context.Context
		ID  string
	}{
		Ctx: ctx,
		ID:  id,
	}
	lockStorerMockRemoveSeller.Lock()
	mock.calls.RemoveSeller = append(mock.calls.RemoveSeller, callInfo)
	lockStorerMockRemoveSeller.Unlock()
	return mock.RemoveSellerFunc(ctx, id)
}

// RemoveSellerCalls gets all the calls that were made to RemoveSeller.
// Check the length with:
//     len(mockedStorer.RemoveSellerCalls())
func (mock *StorerMock) RemoveSellerCalls() []struct {
	Ctx context.Context
	ID  string
} {
	var calls []struct {
		Ctx context.Context
		ID  string
	}
	lockStorerMockRemoveSeller.RLock()
	calls = mock.calls.RemoveSeller
	lockStorerMockRemoveSeller.RUnlock()
	return calls
}

// RouteShader calls RouteShaderFunc.
func (mock *StorerMock) RouteShader(buyerID uint64) (core.RouteShader, error) {
	if mock.RouteShaderFunc == nil {
		panic("StorerMock.RouteShaderFunc: method is nil but Storer.RouteShader was just called")
	}
	callInfo := struct {
		BuyerID uint64
	}{
		BuyerID: buyerID,
	}
	lockStorerMockRouteShader.Lock()
	mock.calls.RouteShader = append(mock.calls.RouteShader, callInfo)
	lockStorerMockRouteShader.Unlock()
	return mock.RouteShaderFunc(buyerID)
}

// RouteShaderCalls gets all the calls that were made to RouteShader.
// Check the length with:
//     len(mockedStorer.RouteShaderCalls())
func (mock *StorerMock) RouteShaderCalls() []struct {
	BuyerID uint64
} {
	var calls []struct {
		BuyerID uint64
	}
	lockStorerMockRouteShader.RLock()
	calls = mock.calls.RouteShader
	lockStorerMockRouteShader.RUnlock()
	return calls
}

// Seller calls SellerFunc.
func (mock *StorerMock) Seller(id string) (routing.Seller, error) {
	if mock.SellerFunc == nil {
		panic("StorerMock.SellerFunc: method is nil but Storer.Seller was just called")
	}
	callInfo := struct {
		ID string
	}{
		ID: id,
	}
	lockStorerMockSeller.Lock()
	mock.calls.Seller = append(mock.calls.Seller, callInfo)
	lockStorerMockSeller.Unlock()
	return mock.SellerFunc(id)
}

// SellerCalls gets all the calls that were made to Seller.
// Check the length with:
//     len(mockedStorer.SellerCalls())
func (mock *StorerMock) SellerCalls() []struct {
	ID string
} {
	var calls []struct {
		ID string
	}
	lockStorerMockSeller.RLock()
	calls = mock.calls.Seller
	lockStorerMockSeller.RUnlock()
	return calls
}

// SellerIDFromCustomerName calls SellerIDFromCustomerNameFunc.
func (mock *StorerMock) SellerIDFromCustomerName(ctx context.Context, customerName string) (string, error) {
	if mock.SellerIDFromCustomerNameFunc == nil {
		panic("StorerMock.SellerIDFromCustomerNameFunc: method is nil but Storer.SellerIDFromCustomerName was just called")
	}
	callInfo := struct {
		Ctx          context.Context
		CustomerName string
	}{
		Ctx:          ctx,
		CustomerName: customerName,
	}
	lockStorerMockSellerIDFromCustomerName.Lock()
	mock.calls.SellerIDFromCustomerName = append(mock.calls.SellerIDFromCustomerName, callInfo)
	lockStorerMockSellerIDFromCustomerName.Unlock()
	return mock.SellerIDFromCustomerNameFunc(ctx, customerName)
}

// SellerIDFromCustomerNameCalls gets all the calls that were made to SellerIDFromCustomerName.
// Check the length with:
//     len(mockedStorer.SellerIDFromCustomerNameCalls())
func (mock *StorerMock) SellerIDFromCustomerNameCalls() []struct {
	Ctx          context.Context
	CustomerName string
} {
	var calls []struct {
		Ctx          context.Context
		CustomerName string
	}
	lockStorerMockSellerIDFromCustomerName.RLock()
	calls = mock.calls.SellerIDFromCustomerName
	lockStorerMockSellerIDFromCustomerName.RUnlock()
	return calls
}

// SellerWithCompanyCode calls SellerWithCompanyCodeFunc.
func (mock *StorerMock) SellerWithCompanyCode(code string) (routing.Seller, error) {
	if mock.SellerWithCompanyCodeFunc == nil {
		panic("StorerMock.SellerWithCompanyCodeFunc: method is nil but Storer.SellerWithCompanyCode was just called")
	}
	callInfo := struct {
		Code string
	}{
		Code: code,
	}
	lockStorerMockSellerWithCompanyCode.Lock()
	mock.calls.SellerWithCompanyCode = append(mock.calls.SellerWithCompanyCode, callInfo)
	lockStorerMockSellerWithCompanyCode.Unlock()
	return mock.SellerWithCompanyCodeFunc(code)
}

// SellerWithCompanyCodeCalls gets all the calls that were made to SellerWithCompanyCode.
// Check the length with:
//     len(mockedStorer.SellerWithCompanyCodeCalls())
func (mock *StorerMock) SellerWithCompanyCodeCalls() []struct {
	Code string
} {
	var calls []struct {
		Code string
	}
	lockStorerMockSellerWithCompanyCode.RLock()
	calls = mock.calls.SellerWithCompanyCode
	lockStorerMockSellerWithCompanyCode.RUnlock()
	return calls
}

// Sellers calls SellersFunc.
func (mock *StorerMock) Sellers() []routing.Seller {
	if mock.SellersFunc == nil {
		panic("StorerMock.SellersFunc: method is nil but Storer.Sellers was just called")
	}
	callInfo := struct {
	}{}
	lockStorerMockSellers.Lock()
	mock.calls.Sellers = append(mock.calls.Sellers, callInfo)
	lockStorerMockSellers.Unlock()
	return mock.SellersFunc()
}

// SellersCalls gets all the calls that were made to Sellers.
// Check the length with:
//     len(mockedStorer.SellersCalls())
func (mock *StorerMock) SellersCalls() []struct {
} {
	var calls []struct {
	}
	lockStorerMockSellers.RLock()
	calls = mock.calls.Sellers
	lockStorerMockSellers.RUnlock()
	return calls
}

// SetBuyer calls SetBuyerFunc.
func (mock *StorerMock) SetBuyer(ctx context.Context, buyer routing.Buyer) error {
	if mock.SetBuyerFunc == nil {
		panic("StorerMock.SetBuyerFunc: method is nil but Storer.SetBuyer was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Buyer routing.Buyer
	}{
		Ctx:   ctx,
		Buyer: buyer,
	}
	lockStorerMockSetBuyer.Lock()
	mock.calls.SetBuyer = append(mock.calls.SetBuyer, callInfo)
	lockStorerMockSetBuyer.Unlock()
	return mock.SetBuyerFunc(ctx, buyer)
}

// SetBuyerCalls gets all the calls that were made to SetBuyer.
// Check the length with:
//     len(mockedStorer.SetBuyerCalls())
func (mock *StorerMock) SetBuyerCalls() []struct {
	Ctx   context.Context
	Buyer routing.Buyer
} {
	var calls []struct {
		Ctx   context.Context
		Buyer routing.Buyer
	}
	lockStorerMockSetBuyer.RLock()
	calls = mock.calls.SetBuyer
	lockStorerMockSetBuyer.RUnlock()
	return calls
}

// SetCustomer calls SetCustomerFunc.
func (mock *StorerMock) SetCustomer(ctx context.Context, customer routing.Customer) error {
	if mock.SetCustomerFunc == nil {
		panic("StorerMock.SetCustomerFunc: method is nil but Storer.SetCustomer was just called")
	}
	callInfo := struct {
		Ctx      context.Context
		Customer routing.Customer
	}{
		Ctx:      ctx,
		Customer: customer,
	}
	lockStorerMockSetCustomer.Lock()
	mock.calls.SetCustomer = append(mock.calls.SetCustomer, callInfo)
	lockStorerMockSetCustomer.Unlock()
	return mock.SetCustomerFunc(ctx, customer)
}

// SetCustomerCalls gets all the calls that were made to SetCustomer.
// Check the length with:
//     len(mockedStorer.SetCustomerCalls())
func (mock *StorerMock) SetCustomerCalls() []struct {
	Ctx      context.Context
	Customer routing.Customer
} {
	var calls []struct {
		Ctx      context.Context
		Customer routing.Customer
	}
	lockStorerMockSetCustomer.RLock()
	calls = mock.calls.SetCustomer
	lockStorerMockSetCustomer.RUnlock()
	return calls
}

// SetCustomerLink calls SetCustomerLinkFunc.
func (mock *StorerMock) SetCustomerLink(ctx context.Context, customerName string, buyerID uint64, sellerID string) error {
	if mock.SetCustomerLinkFunc == nil {
		panic("StorerMock.SetCustomerLinkFunc: method is nil but Storer.SetCustomerLink was just called")
	}
	callInfo := struct {
		Ctx          context.Context
		CustomerName string
		BuyerID      uint64
		SellerID     string
	}{
		Ctx:          ctx,
		CustomerName: customerName,
		BuyerID:      buyerID,
		SellerID:     sellerID,
	}
	lockStorerMockSetCustomerLink.Lock()
	mock.calls.SetCustomerLink = append(mock.calls.SetCustomerLink, callInfo)
	lockStorerMockSetCustomerLink.Unlock()
	return mock.SetCustomerLinkFunc(ctx, customerName, buyerID, sellerID)
}

// SetCustomerLinkCalls gets all the calls that were made to SetCustomerLink.
// Check the length with:
//     len(mockedStorer.SetCustomerLinkCalls())
func (mock *StorerMock) SetCustomerLinkCalls() []struct {
	Ctx          context.Context
	CustomerName string
	BuyerID      uint64
	SellerID     string
} {
	var calls []struct {
		Ctx          context.Context
		CustomerName string
		BuyerID      uint64
		SellerID     string
	}
	lockStorerMockSetCustomerLink.RLock()
	calls = mock.calls.SetCustomerLink
	lockStorerMockSetCustomerLink.RUnlock()
	return calls
}

// SetDatacenter calls SetDatacenterFunc.
func (mock *StorerMock) SetDatacenter(ctx context.Context, datacenter routing.Datacenter) error {
	if mock.SetDatacenterFunc == nil {
		panic("StorerMock.SetDatacenterFunc: method is nil but Storer.SetDatacenter was just called")
	}
	callInfo := struct {
		Ctx        context.Context
		Datacenter routing.Datacenter
	}{
		Ctx:        ctx,
		Datacenter: datacenter,
	}
	lockStorerMockSetDatacenter.Lock()
	mock.calls.SetDatacenter = append(mock.calls.SetDatacenter, callInfo)
	lockStorerMockSetDatacenter.Unlock()
	return mock.SetDatacenterFunc(ctx, datacenter)
}

// SetDatacenterCalls gets all the calls that were made to SetDatacenter.
// Check the length with:
//     len(mockedStorer.SetDatacenterCalls())
func (mock *StorerMock) SetDatacenterCalls() []struct {
	Ctx        context.Context
	Datacenter routing.Datacenter
} {
	var calls []struct {
		Ctx        context.Context
		Datacenter routing.Datacenter
	}
	lockStorerMockSetDatacenter.RLock()
	calls = mock.calls.SetDatacenter
	lockStorerMockSetDatacenter.RUnlock()
	return calls
}

// SetFeatureFlagByName calls SetFeatureFlagByNameFunc.
func (mock *StorerMock) SetFeatureFlagByName(ctx context.Context, flagName string, flagVal bool) error {
	if mock.SetFeatureFlagByNameFunc == nil {
		panic("StorerMock.SetFeatureFlagByNameFunc: method is nil but Storer.SetFeatureFlagByName was just called")
	}
	callInfo := struct {
		Ctx      context.Context
		FlagName string
		FlagVal  bool
	}{
		Ctx:      ctx,
		FlagName: flagName,
		FlagVal:  flagVal,
	}
	lockStorerMockSetFeatureFlagByName.Lock()
	mock.calls.SetFeatureFlagByName = append(mock.calls.SetFeatureFlagByName, callInfo)
	lockStorerMockSetFeatureFlagByName.Unlock()
	return mock.SetFeatureFlagByNameFunc(ctx, flagName, flagVal)
}

// SetFeatureFlagByNameCalls gets all the calls that were made to SetFeatureFlagByName.
// Check the length with:
//     len(mockedStorer.SetFeatureFlagByNameCalls())
func (mock *StorerMock) SetFeatureFlagByNameCalls() []struct {
	Ctx      context.Context
	FlagName string
	FlagVal  bool
} {
	var calls []struct {
		Ctx      context.Context
		FlagName string
		FlagVal  bool
	}
	lockStorerMockSetFeatureFlagByName.RLock()
	calls = mock.calls.SetFeatureFlagByName
	lockStorerMockSetFeatureFlagByName.RUnlock()
	return calls
}

// SetRelay calls SetRelayFunc.
func (mock *StorerMock) SetRelay(ctx context.Context, relay routing.Relay) error {
	if mock.SetRelayFunc == nil {
		panic("StorerMock.SetRelayFunc: method is nil but Storer.SetRelay was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Relay routing.Relay
	}{
		Ctx:   ctx,
		Relay: relay,
	}
	lockStorerMockSetRelay.Lock()
	mock.calls.SetRelay = append(mock.calls.SetRelay, callInfo)
	lockStorerMockSetRelay.Unlock()
	return mock.SetRelayFunc(ctx, relay)
}

// SetRelayCalls gets all the calls that were made to SetRelay.
// Check the length with:
//     len(mockedStorer.SetRelayCalls())
func (mock *StorerMock) SetRelayCalls() []struct {
	Ctx   context.Context
	Relay routing.Relay
} {
	var calls []struct {
		Ctx   context.Context
		Relay routing.Relay
	}
	lockStorerMockSetRelay.RLock()
	calls = mock.calls.SetRelay
	lockStorerMockSetRelay.RUnlock()
	return calls
}

// SetRelayMetadata calls SetRelayMetadataFunc.
func (mock *StorerMock) SetRelayMetadata(ctx context.Context, relay routing.Relay) error {
	if mock.SetRelayMetadataFunc == nil {
		panic("StorerMock.SetRelayMetadataFunc: method is nil but Storer.SetRelayMetadata was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Relay routing.Relay
	}{
		Ctx:   ctx,
		Relay: relay,
	}
	lockStorerMockSetRelayMetadata.Lock()
	mock.calls.SetRelayMetadata = append(mock.calls.SetRelayMetadata, callInfo)
	lockStorerMockSetRelayMetadata.Unlock()
	return mock.SetRelayMetadataFunc(ctx, relay)
}

// SetRelayMetadataCalls gets all the calls that were made to SetRelayMetadata.
// Check the length with:
//     len(mockedStorer.SetRelayMetadataCalls())
func (mock *StorerMock) SetRelayMetadataCalls() []struct {
	Ctx   context.Context
	Relay routing.Relay
} {
	var calls []struct {
		Ctx   context.Context
		Relay routing.Relay
	}
	lockStorerMockSetRelayMetadata.RLock()
	calls = mock.calls.SetRelayMetadata
	lockStorerMockSetRelayMetadata.RUnlock()
	return calls
}

// SetSeller calls SetSellerFunc.
func (mock *StorerMock) SetSeller(ctx context.Context, seller routing.Seller) error {
	if mock.SetSellerFunc == nil {
		panic("StorerMock.SetSellerFunc: method is nil but Storer.SetSeller was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Seller routing.Seller
	}{
		Ctx:    ctx,
		Seller: seller,
	}
	lockStorerMockSetSeller.Lock()
	mock.calls.SetSeller = append(mock.calls.SetSeller, callInfo)
	lockStorerMockSetSeller.Unlock()
	return mock.SetSellerFunc(ctx, seller)
}

// SetSellerCalls gets all the calls that were made to SetSeller.
// Check the length with:
//     len(mockedStorer.SetSellerCalls())
func (mock *StorerMock) SetSellerCalls() []struct {
	Ctx    context.Context
	Seller routing.Seller
} {
	var calls []struct {
		Ctx    context.Context
		Seller routing.Seller
	}
	lockStorerMockSetSeller.RLock()
	calls = mock.calls.SetSeller
	lockStorerMockSetSeller.RUnlock()
	return calls
}

// SetSequenceNumber calls SetSequenceNumberFunc.
func (mock *StorerMock) SetSequenceNumber(ctx context.Context, value int64) error {
	if mock.SetSequenceNumberFunc == nil {
		panic("StorerMock.SetSequenceNumberFunc: method is nil but Storer.SetSequenceNumber was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Value int64
	}{
		Ctx:   ctx,
		Value: value,
	}
	lockStorerMockSetSequenceNumber.Lock()
	mock.calls.SetSequenceNumber = append(mock.calls.SetSequenceNumber, callInfo)
	lockStorerMockSetSequenceNumber.Unlock()
	return mock.SetSequenceNumberFunc(ctx, value)
}

// SetSequenceNumberCalls gets all the calls that were made to SetSequenceNumber.
// Check the length with:
//     len(mockedStorer.SetSequenceNumberCalls())
func (mock *StorerMock) SetSequenceNumberCalls() []struct {
	Ctx   context.Context
	Value int64
} {
	var calls []struct {
		Ctx   context.Context
		Value int64
	}
	lockStorerMockSetSequenceNumber.RLock()
	calls = mock.calls.SetSequenceNumber
	lockStorerMockSetSequenceNumber.RUnlock()
	return calls
}

// SyncLoop calls SyncLoopFunc.
func (mock *StorerMock) SyncLoop(ctx context.Context, c <-chan time.Time) {
	if mock.SyncLoopFunc == nil {
		panic("StorerMock.SyncLoopFunc: method is nil but Storer.SyncLoop was just called")
	}
	callInfo := struct {
		Ctx context.Context
		C   <-chan time.Time
	}{
		Ctx: ctx,
		C:   c,
	}
	lockStorerMockSyncLoop.Lock()
	mock.calls.SyncLoop = append(mock.calls.SyncLoop, callInfo)
	lockStorerMockSyncLoop.Unlock()
	mock.SyncLoopFunc(ctx, c)
}

// SyncLoopCalls gets all the calls that were made to SyncLoop.
// Check the length with:
//     len(mockedStorer.SyncLoopCalls())
func (mock *StorerMock) SyncLoopCalls() []struct {
	Ctx context.Context
	C   <-chan time.Time
} {
	var calls []struct {
		Ctx context.Context
		C   <-chan time.Time
	}
	lockStorerMockSyncLoop.RLock()
	calls = mock.calls.SyncLoop
	lockStorerMockSyncLoop.RUnlock()
	return calls
}

// UpdateBuyer calls UpdateBuyerFunc.
func (mock *StorerMock) UpdateBuyer(ctx context.Context, buyerID uint64, field string, value interface{}) error {
	if mock.UpdateBuyerFunc == nil {
		panic("StorerMock.UpdateBuyerFunc: method is nil but Storer.UpdateBuyer was just called")
	}
	callInfo := struct {
		Ctx     context.Context
		BuyerID uint64
		Field   string
		Value   interface{}
	}{
		Ctx:     ctx,
		BuyerID: buyerID,
		Field:   field,
		Value:   value,
	}
	lockStorerMockUpdateBuyer.Lock()
	mock.calls.UpdateBuyer = append(mock.calls.UpdateBuyer, callInfo)
	lockStorerMockUpdateBuyer.Unlock()
	return mock.UpdateBuyerFunc(ctx, buyerID, field, value)
}

// UpdateBuyerCalls gets all the calls that were made to UpdateBuyer.
// Check the length with:
//     len(mockedStorer.UpdateBuyerCalls())
func (mock *StorerMock) UpdateBuyerCalls() []struct {
	Ctx     context.Context
	BuyerID uint64
	Field   string
	Value   interface{}
} {
	var calls []struct {
		Ctx     context.Context
		BuyerID uint64
		Field   string
		Value   interface{}
	}
	lockStorerMockUpdateBuyer.RLock()
	calls = mock.calls.UpdateBuyer
	lockStorerMockUpdateBuyer.RUnlock()
	return calls
}

// UpdateCustomer calls UpdateCustomerFunc.
func (mock *StorerMock) UpdateCustomer(ctx context.Context, customerID string, field string, value interface{}) error {
	if mock.UpdateCustomerFunc == nil {
		panic("StorerMock.UpdateCustomerFunc: method is nil but Storer.UpdateCustomer was just called")
	}
	callInfo := struct {
		Ctx        context.Context
		CustomerID string
		Field      string
		Value      interface{}
	}{
		Ctx:        ctx,
		CustomerID: customerID,
		Field:      field,
		Value:      value,
	}
	lockStorerMockUpdateCustomer.Lock()
	mock.calls.UpdateCustomer = append(mock.calls.UpdateCustomer, callInfo)
	lockStorerMockUpdateCustomer.Unlock()
	return mock.UpdateCustomerFunc(ctx, customerID, field, value)
}

// UpdateCustomerCalls gets all the calls that were made to UpdateCustomer.
// Check the length with:
//     len(mockedStorer.UpdateCustomerCalls())
func (mock *StorerMock) UpdateCustomerCalls() []struct {
	Ctx        context.Context
	CustomerID string
	Field      string
	Value      interface{}
} {
	var calls []struct {
		Ctx        context.Context
		CustomerID string
		Field      string
		Value      interface{}
	}
	lockStorerMockUpdateCustomer.RLock()
	calls = mock.calls.UpdateCustomer
	lockStorerMockUpdateCustomer.RUnlock()
	return calls
}

// UpdateInternalConfig calls UpdateInternalConfigFunc.
func (mock *StorerMock) UpdateInternalConfig(ctx context.Context, buyerID uint64, field string, value interface{}) error {
	if mock.UpdateInternalConfigFunc == nil {
		panic("StorerMock.UpdateInternalConfigFunc: method is nil but Storer.UpdateInternalConfig was just called")
	}
	callInfo := struct {
		Ctx     context.Context
		BuyerID uint64
		Field   string
		Value   interface{}
	}{
		Ctx:     ctx,
		BuyerID: buyerID,
		Field:   field,
		Value:   value,
	}
	lockStorerMockUpdateInternalConfig.Lock()
	mock.calls.UpdateInternalConfig = append(mock.calls.UpdateInternalConfig, callInfo)
	lockStorerMockUpdateInternalConfig.Unlock()
	return mock.UpdateInternalConfigFunc(ctx, buyerID, field, value)
}

// UpdateInternalConfigCalls gets all the calls that were made to UpdateInternalConfig.
// Check the length with:
//     len(mockedStorer.UpdateInternalConfigCalls())
func (mock *StorerMock) UpdateInternalConfigCalls() []struct {
	Ctx     context.Context
	BuyerID uint64
	Field   string
	Value   interface{}
} {
	var calls []struct {
		Ctx     context.Context
		BuyerID uint64
		Field   string
		Value   interface{}
	}
	lockStorerMockUpdateInternalConfig.RLock()
	calls = mock.calls.UpdateInternalConfig
	lockStorerMockUpdateInternalConfig.RUnlock()
	return calls
}

// UpdateRelay calls UpdateRelayFunc.
func (mock *StorerMock) UpdateRelay(ctx context.Context, relayID uint64, field string, value interface{}) error {
	if mock.UpdateRelayFunc == nil {
		panic("StorerMock.UpdateRelayFunc: method is nil but Storer.UpdateRelay was just called")
	}
	callInfo := struct {
		Ctx     context.Context
		RelayID uint64
		Field   string
		Value   interface{}
	}{
		Ctx:     ctx,
		RelayID: relayID,
		Field:   field,
		Value:   value,
	}
	lockStorerMockUpdateRelay.Lock()
	mock.calls.UpdateRelay = append(mock.calls.UpdateRelay, callInfo)
	lockStorerMockUpdateRelay.Unlock()
	return mock.UpdateRelayFunc(ctx, relayID, field, value)
}

// UpdateRelayCalls gets all the calls that were made to UpdateRelay.
// Check the length with:
//     len(mockedStorer.UpdateRelayCalls())
func (mock *StorerMock) UpdateRelayCalls() []struct {
	Ctx     context.Context
	RelayID uint64
	Field   string
	Value   interface{}
} {
	var calls []struct {
		Ctx     context.Context
		RelayID uint64
		Field   string
		Value   interface{}
	}
	lockStorerMockUpdateRelay.RLock()
	calls = mock.calls.UpdateRelay
	lockStorerMockUpdateRelay.RUnlock()
	return calls
}

// UpdateRouteShader calls UpdateRouteShaderFunc.
func (mock *StorerMock) UpdateRouteShader(ctx context.Context, buyerID uint64, field string, value interface{}) error {
	if mock.UpdateRouteShaderFunc == nil {
		panic("StorerMock.UpdateRouteShaderFunc: method is nil but Storer.UpdateRouteShader was just called")
	}
	callInfo := struct {
		Ctx     context.Context
		BuyerID uint64
		Field   string
		Value   interface{}
	}{
		Ctx:     ctx,
		BuyerID: buyerID,
		Field:   field,
		Value:   value,
	}
	lockStorerMockUpdateRouteShader.Lock()
	mock.calls.UpdateRouteShader = append(mock.calls.UpdateRouteShader, callInfo)
	lockStorerMockUpdateRouteShader.Unlock()
	return mock.UpdateRouteShaderFunc(ctx, buyerID, field, value)
}

// UpdateRouteShaderCalls gets all the calls that were made to UpdateRouteShader.
// Check the length with:
//     len(mockedStorer.UpdateRouteShaderCalls())
func (mock *StorerMock) UpdateRouteShaderCalls() []struct {
	Ctx     context.Context
	BuyerID uint64
	Field   string
	Value   interface{}
} {
	var calls []struct {
		Ctx     context.Context
		BuyerID uint64
		Field   string
		Value   interface{}
	}
	lockStorerMockUpdateRouteShader.RLock()
	calls = mock.calls.UpdateRouteShader
	lockStorerMockUpdateRouteShader.RUnlock()
	return calls
}

// UpdateSeller calls UpdateSellerFunc.
func (mock *StorerMock) UpdateSeller(ctx context.Context, sellerID string, field string, value interface{}) error {
	if mock.UpdateSellerFunc == nil {
		panic("StorerMock.UpdateSellerFunc: method is nil but Storer.UpdateSeller was just called")
	}
	callInfo := struct {
		Ctx      context.Context
		SellerID string
		Field    string
		Value    interface{}
	}{
		Ctx:      ctx,
		SellerID: sellerID,
		Field:    field,
		Value:    value,
	}
	lockStorerMockUpdateSeller.Lock()
	mock.calls.UpdateSeller = append(mock.calls.UpdateSeller, callInfo)
	lockStorerMockUpdateSeller.Unlock()
	return mock.UpdateSellerFunc(ctx, sellerID, field, value)
}

// UpdateSellerCalls gets all the calls that were made to UpdateSeller.
// Check the length with:
//     len(mockedStorer.UpdateSellerCalls())
func (mock *StorerMock) UpdateSellerCalls() []struct {
	Ctx      context.Context
	SellerID string
	Field    string
	Value    interface{}
} {
	var calls []struct {
		Ctx      context.Context
		SellerID string
		Field    string
		Value    interface{}
	}
	lockStorerMockUpdateSeller.RLock()
	calls = mock.calls.UpdateSeller
	lockStorerMockUpdateSeller.RUnlock()
	return calls
}
