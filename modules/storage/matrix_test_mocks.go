// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package storage

import (
	"sync"
)

var (
	lockMatrixStoreMockDeleteMatrixSvc         sync.RWMutex
	lockMatrixStoreMockDeleteOptimizerMatrix   sync.RWMutex
	lockMatrixStoreMockGetLiveMatrix           sync.RWMutex
	lockMatrixStoreMockGetMatrixSvcMaster      sync.RWMutex
	lockMatrixStoreMockGetMatrixSvcs           sync.RWMutex
	lockMatrixStoreMockGetOptimizerMaster      sync.RWMutex
	lockMatrixStoreMockGetOptimizerMatrices    sync.RWMutex
	lockMatrixStoreMockGetRelayBackendLiveData sync.RWMutex
	lockMatrixStoreMockGetRelayBackendMaster   sync.RWMutex
	lockMatrixStoreMockSetRelayBackendLiveData sync.RWMutex
	lockMatrixStoreMockSetRelayBackendMaster   sync.RWMutex
	lockMatrixStoreMockUpdateLiveMatrix        sync.RWMutex
	lockMatrixStoreMockUpdateMatrixSvc         sync.RWMutex
	lockMatrixStoreMockUpdateMatrixSvcMaster   sync.RWMutex
	lockMatrixStoreMockUpdateOptimizerMaster   sync.RWMutex
	lockMatrixStoreMockUpdateOptimizerMatrix   sync.RWMutex
)

// Ensure, that MatrixStoreMock does implement MatrixStore.
// If this is not the case, regenerate this file with moq.
var _ MatrixStore = &MatrixStoreMock{}

// MatrixStoreMock is a mock implementation of MatrixStore.
//
//     func TestSomethingThatUsesMatrixStore(t *testing.T) {
//
//         // make and configure a mocked MatrixStore
//         mockedMatrixStore := &MatrixStoreMock{
//             DeleteMatrixSvcFunc: func(id uint64) error {
// 	               panic("mock out the DeleteMatrixSvc method")
//             },
//             DeleteOptimizerMatrixFunc: func(id uint64, matrixType string) error {
// 	               panic("mock out the DeleteOptimizerMatrix method")
//             },
//             GetLiveMatrixFunc: func(matrixType string) ([]byte, error) {
// 	               panic("mock out the GetLiveMatrix method")
//             },
//             GetMatrixSvcMasterFunc: func() (uint64, error) {
// 	               panic("mock out the GetMatrixSvcMaster method")
//             },
//             GetMatrixSvcsFunc: func() ([]MatrixSvcData, error) {
// 	               panic("mock out the GetMatrixSvcs method")
//             },
//             GetOptimizerMasterFunc: func() (uint64, error) {
// 	               panic("mock out the GetOptimizerMaster method")
//             },
//             GetOptimizerMatricesFunc: func() ([]Matrix, error) {
// 	               panic("mock out the GetOptimizerMatrices method")
//             },
//             GetRelayBackendLiveDataFunc: func(address []string) ([]RelayBackendLiveData, error) {
// 	               panic("mock out the GetRelayBackendLiveData method")
//             },
//             GetRelayBackendMasterFunc: func() (RelayBackendLiveData, error) {
// 	               panic("mock out the GetRelayBackendMaster method")
//             },
//             SetRelayBackendLiveDataFunc: func(data RelayBackendLiveData) error {
// 	               panic("mock out the SetRelayBackendLiveData method")
//             },
//             SetRelayBackendMasterFunc: func(in1 RelayBackendLiveData) error {
// 	               panic("mock out the SetRelayBackendMaster method")
//             },
//             UpdateLiveMatrixFunc: func(matrixData []byte, matrixType string) error {
// 	               panic("mock out the UpdateLiveMatrix method")
//             },
//             UpdateMatrixSvcFunc: func(matrixSvcData MatrixSvcData) error {
// 	               panic("mock out the UpdateMatrixSvc method")
//             },
//             UpdateMatrixSvcMasterFunc: func(id uint64) error {
// 	               panic("mock out the UpdateMatrixSvcMaster method")
//             },
//             UpdateOptimizerMasterFunc: func(id uint64) error {
// 	               panic("mock out the UpdateOptimizerMaster method")
//             },
//             UpdateOptimizerMatrixFunc: func(matrix Matrix) error {
// 	               panic("mock out the UpdateOptimizerMatrix method")
//             },
//         }
//
//         // use mockedMatrixStore in code that requires MatrixStore
//         // and then make assertions.
//
//     }
type MatrixStoreMock struct {
	// DeleteMatrixSvcFunc mocks the DeleteMatrixSvc method.
	DeleteMatrixSvcFunc func(id uint64) error

	// DeleteOptimizerMatrixFunc mocks the DeleteOptimizerMatrix method.
	DeleteOptimizerMatrixFunc func(id uint64, matrixType string) error

	// GetLiveMatrixFunc mocks the GetLiveMatrix method.
	GetLiveMatrixFunc func(matrixType string) ([]byte, error)

	// GetMatrixSvcMasterFunc mocks the GetMatrixSvcMaster method.
	GetMatrixSvcMasterFunc func() (uint64, error)

	// GetMatrixSvcsFunc mocks the GetMatrixSvcs method.
	GetMatrixSvcsFunc func() ([]MatrixSvcData, error)

	// GetOptimizerMasterFunc mocks the GetOptimizerMaster method.
	GetOptimizerMasterFunc func() (uint64, error)

	// GetOptimizerMatricesFunc mocks the GetOptimizerMatrices method.
	GetOptimizerMatricesFunc func() ([]Matrix, error)

	// GetRelayBackendLiveDataFunc mocks the GetRelayBackendLiveData method.
	GetRelayBackendLiveDataFunc func(address []string) ([]RelayBackendLiveData, error)

	// GetRelayBackendMasterFunc mocks the GetRelayBackendMaster method.
	GetRelayBackendMasterFunc func() (RelayBackendLiveData, error)

	// SetRelayBackendLiveDataFunc mocks the SetRelayBackendLiveData method.
	SetRelayBackendLiveDataFunc func(data RelayBackendLiveData) error

	// SetRelayBackendMasterFunc mocks the SetRelayBackendMaster method.
	SetRelayBackendMasterFunc func(in1 RelayBackendLiveData) error

	// UpdateLiveMatrixFunc mocks the UpdateLiveMatrix method.
	UpdateLiveMatrixFunc func(matrixData []byte, matrixType string) error

	// UpdateMatrixSvcFunc mocks the UpdateMatrixSvc method.
	UpdateMatrixSvcFunc func(matrixSvcData MatrixSvcData) error

	// UpdateMatrixSvcMasterFunc mocks the UpdateMatrixSvcMaster method.
	UpdateMatrixSvcMasterFunc func(id uint64) error

	// UpdateOptimizerMasterFunc mocks the UpdateOptimizerMaster method.
	UpdateOptimizerMasterFunc func(id uint64) error

	// UpdateOptimizerMatrixFunc mocks the UpdateOptimizerMatrix method.
	UpdateOptimizerMatrixFunc func(matrix Matrix) error

	// calls tracks calls to the methods.
	calls struct {
		// DeleteMatrixSvc holds details about calls to the DeleteMatrixSvc method.
		DeleteMatrixSvc []struct {
			// ID is the id argument value.
			ID uint64
		}
		// DeleteOptimizerMatrix holds details about calls to the DeleteOptimizerMatrix method.
		DeleteOptimizerMatrix []struct {
			// ID is the id argument value.
			ID uint64
			// MatrixType is the matrixType argument value.
			MatrixType string
		}
		// GetLiveMatrix holds details about calls to the GetLiveMatrix method.
		GetLiveMatrix []struct {
			// MatrixType is the matrixType argument value.
			MatrixType string
		}
		// GetMatrixSvcMaster holds details about calls to the GetMatrixSvcMaster method.
		GetMatrixSvcMaster []struct {
		}
		// GetMatrixSvcs holds details about calls to the GetMatrixSvcs method.
		GetMatrixSvcs []struct {
		}
		// GetOptimizerMaster holds details about calls to the GetOptimizerMaster method.
		GetOptimizerMaster []struct {
		}
		// GetOptimizerMatrices holds details about calls to the GetOptimizerMatrices method.
		GetOptimizerMatrices []struct {
		}
		// GetRelayBackendLiveData holds details about calls to the GetRelayBackendLiveData method.
		GetRelayBackendLiveData []struct {
			// Address is the address argument value.
			Address []string
		}
		// GetRelayBackendMaster holds details about calls to the GetRelayBackendMaster method.
		GetRelayBackendMaster []struct {
		}
		// SetRelayBackendLiveData holds details about calls to the SetRelayBackendLiveData method.
		SetRelayBackendLiveData []struct {
			// Data is the data argument value.
			Data RelayBackendLiveData
		}
		// SetRelayBackendMaster holds details about calls to the SetRelayBackendMaster method.
		SetRelayBackendMaster []struct {
			// In1 is the in1 argument value.
			In1 RelayBackendLiveData
		}
		// UpdateLiveMatrix holds details about calls to the UpdateLiveMatrix method.
		UpdateLiveMatrix []struct {
			// MatrixData is the matrixData argument value.
			MatrixData []byte
			// MatrixType is the matrixType argument value.
			MatrixType string
		}
		// UpdateMatrixSvc holds details about calls to the UpdateMatrixSvc method.
		UpdateMatrixSvc []struct {
			// MatrixSvcData is the matrixSvcData argument value.
			MatrixSvcData MatrixSvcData
		}
		// UpdateMatrixSvcMaster holds details about calls to the UpdateMatrixSvcMaster method.
		UpdateMatrixSvcMaster []struct {
			// ID is the id argument value.
			ID uint64
		}
		// UpdateOptimizerMaster holds details about calls to the UpdateOptimizerMaster method.
		UpdateOptimizerMaster []struct {
			// ID is the id argument value.
			ID uint64
		}
		// UpdateOptimizerMatrix holds details about calls to the UpdateOptimizerMatrix method.
		UpdateOptimizerMatrix []struct {
			// Matrix is the matrix argument value.
			Matrix Matrix
		}
	}
}

// DeleteMatrixSvc calls DeleteMatrixSvcFunc.
func (mock *MatrixStoreMock) DeleteMatrixSvc(id uint64) error {
	if mock.DeleteMatrixSvcFunc == nil {
		panic("MatrixStoreMock.DeleteMatrixSvcFunc: method is nil but MatrixStore.DeleteMatrixSvc was just called")
	}
	callInfo := struct {
		ID uint64
	}{
		ID: id,
	}
	lockMatrixStoreMockDeleteMatrixSvc.Lock()
	mock.calls.DeleteMatrixSvc = append(mock.calls.DeleteMatrixSvc, callInfo)
	lockMatrixStoreMockDeleteMatrixSvc.Unlock()
	return mock.DeleteMatrixSvcFunc(id)
}

// DeleteMatrixSvcCalls gets all the calls that were made to DeleteMatrixSvc.
// Check the length with:
//     len(mockedMatrixStore.DeleteMatrixSvcCalls())
func (mock *MatrixStoreMock) DeleteMatrixSvcCalls() []struct {
	ID uint64
} {
	var calls []struct {
		ID uint64
	}
	lockMatrixStoreMockDeleteMatrixSvc.RLock()
	calls = mock.calls.DeleteMatrixSvc
	lockMatrixStoreMockDeleteMatrixSvc.RUnlock()
	return calls
}

// DeleteOptimizerMatrix calls DeleteOptimizerMatrixFunc.
func (mock *MatrixStoreMock) DeleteOptimizerMatrix(id uint64, matrixType string) error {
	if mock.DeleteOptimizerMatrixFunc == nil {
		panic("MatrixStoreMock.DeleteOptimizerMatrixFunc: method is nil but MatrixStore.DeleteOptimizerMatrix was just called")
	}
	callInfo := struct {
		ID         uint64
		MatrixType string
	}{
		ID:         id,
		MatrixType: matrixType,
	}
	lockMatrixStoreMockDeleteOptimizerMatrix.Lock()
	mock.calls.DeleteOptimizerMatrix = append(mock.calls.DeleteOptimizerMatrix, callInfo)
	lockMatrixStoreMockDeleteOptimizerMatrix.Unlock()
	return mock.DeleteOptimizerMatrixFunc(id, matrixType)
}

// DeleteOptimizerMatrixCalls gets all the calls that were made to DeleteOptimizerMatrix.
// Check the length with:
//     len(mockedMatrixStore.DeleteOptimizerMatrixCalls())
func (mock *MatrixStoreMock) DeleteOptimizerMatrixCalls() []struct {
	ID         uint64
	MatrixType string
} {
	var calls []struct {
		ID         uint64
		MatrixType string
	}
	lockMatrixStoreMockDeleteOptimizerMatrix.RLock()
	calls = mock.calls.DeleteOptimizerMatrix
	lockMatrixStoreMockDeleteOptimizerMatrix.RUnlock()
	return calls
}

// GetLiveMatrix calls GetLiveMatrixFunc.
func (mock *MatrixStoreMock) GetLiveMatrix(matrixType string) ([]byte, error) {
	if mock.GetLiveMatrixFunc == nil {
		panic("MatrixStoreMock.GetLiveMatrixFunc: method is nil but MatrixStore.GetLiveMatrix was just called")
	}
	callInfo := struct {
		MatrixType string
	}{
		MatrixType: matrixType,
	}
	lockMatrixStoreMockGetLiveMatrix.Lock()
	mock.calls.GetLiveMatrix = append(mock.calls.GetLiveMatrix, callInfo)
	lockMatrixStoreMockGetLiveMatrix.Unlock()
	return mock.GetLiveMatrixFunc(matrixType)
}

// GetLiveMatrixCalls gets all the calls that were made to GetLiveMatrix.
// Check the length with:
//     len(mockedMatrixStore.GetLiveMatrixCalls())
func (mock *MatrixStoreMock) GetLiveMatrixCalls() []struct {
	MatrixType string
} {
	var calls []struct {
		MatrixType string
	}
	lockMatrixStoreMockGetLiveMatrix.RLock()
	calls = mock.calls.GetLiveMatrix
	lockMatrixStoreMockGetLiveMatrix.RUnlock()
	return calls
}

// GetMatrixSvcMaster calls GetMatrixSvcMasterFunc.
func (mock *MatrixStoreMock) GetMatrixSvcMaster() (uint64, error) {
	if mock.GetMatrixSvcMasterFunc == nil {
		panic("MatrixStoreMock.GetMatrixSvcMasterFunc: method is nil but MatrixStore.GetMatrixSvcMaster was just called")
	}
	callInfo := struct {
	}{}
	lockMatrixStoreMockGetMatrixSvcMaster.Lock()
	mock.calls.GetMatrixSvcMaster = append(mock.calls.GetMatrixSvcMaster, callInfo)
	lockMatrixStoreMockGetMatrixSvcMaster.Unlock()
	return mock.GetMatrixSvcMasterFunc()
}

// GetMatrixSvcMasterCalls gets all the calls that were made to GetMatrixSvcMaster.
// Check the length with:
//     len(mockedMatrixStore.GetMatrixSvcMasterCalls())
func (mock *MatrixStoreMock) GetMatrixSvcMasterCalls() []struct {
} {
	var calls []struct {
	}
	lockMatrixStoreMockGetMatrixSvcMaster.RLock()
	calls = mock.calls.GetMatrixSvcMaster
	lockMatrixStoreMockGetMatrixSvcMaster.RUnlock()
	return calls
}

// GetMatrixSvcs calls GetMatrixSvcsFunc.
func (mock *MatrixStoreMock) GetMatrixSvcs() ([]MatrixSvcData, error) {
	if mock.GetMatrixSvcsFunc == nil {
		panic("MatrixStoreMock.GetMatrixSvcsFunc: method is nil but MatrixStore.GetMatrixSvcs was just called")
	}
	callInfo := struct {
	}{}
	lockMatrixStoreMockGetMatrixSvcs.Lock()
	mock.calls.GetMatrixSvcs = append(mock.calls.GetMatrixSvcs, callInfo)
	lockMatrixStoreMockGetMatrixSvcs.Unlock()
	return mock.GetMatrixSvcsFunc()
}

// GetMatrixSvcsCalls gets all the calls that were made to GetMatrixSvcs.
// Check the length with:
//     len(mockedMatrixStore.GetMatrixSvcsCalls())
func (mock *MatrixStoreMock) GetMatrixSvcsCalls() []struct {
} {
	var calls []struct {
	}
	lockMatrixStoreMockGetMatrixSvcs.RLock()
	calls = mock.calls.GetMatrixSvcs
	lockMatrixStoreMockGetMatrixSvcs.RUnlock()
	return calls
}

// GetOptimizerMaster calls GetOptimizerMasterFunc.
func (mock *MatrixStoreMock) GetOptimizerMaster() (uint64, error) {
	if mock.GetOptimizerMasterFunc == nil {
		panic("MatrixStoreMock.GetOptimizerMasterFunc: method is nil but MatrixStore.GetOptimizerMaster was just called")
	}
	callInfo := struct {
	}{}
	lockMatrixStoreMockGetOptimizerMaster.Lock()
	mock.calls.GetOptimizerMaster = append(mock.calls.GetOptimizerMaster, callInfo)
	lockMatrixStoreMockGetOptimizerMaster.Unlock()
	return mock.GetOptimizerMasterFunc()
}

// GetOptimizerMasterCalls gets all the calls that were made to GetOptimizerMaster.
// Check the length with:
//     len(mockedMatrixStore.GetOptimizerMasterCalls())
func (mock *MatrixStoreMock) GetOptimizerMasterCalls() []struct {
} {
	var calls []struct {
	}
	lockMatrixStoreMockGetOptimizerMaster.RLock()
	calls = mock.calls.GetOptimizerMaster
	lockMatrixStoreMockGetOptimizerMaster.RUnlock()
	return calls
}

// GetOptimizerMatrices calls GetOptimizerMatricesFunc.
func (mock *MatrixStoreMock) GetOptimizerMatrices() ([]Matrix, error) {
	if mock.GetOptimizerMatricesFunc == nil {
		panic("MatrixStoreMock.GetOptimizerMatricesFunc: method is nil but MatrixStore.GetOptimizerMatrices was just called")
	}
	callInfo := struct {
	}{}
	lockMatrixStoreMockGetOptimizerMatrices.Lock()
	mock.calls.GetOptimizerMatrices = append(mock.calls.GetOptimizerMatrices, callInfo)
	lockMatrixStoreMockGetOptimizerMatrices.Unlock()
	return mock.GetOptimizerMatricesFunc()
}

// GetOptimizerMatricesCalls gets all the calls that were made to GetOptimizerMatrices.
// Check the length with:
//     len(mockedMatrixStore.GetOptimizerMatricesCalls())
func (mock *MatrixStoreMock) GetOptimizerMatricesCalls() []struct {
} {
	var calls []struct {
	}
	lockMatrixStoreMockGetOptimizerMatrices.RLock()
	calls = mock.calls.GetOptimizerMatrices
	lockMatrixStoreMockGetOptimizerMatrices.RUnlock()
	return calls
}

// GetRelayBackendLiveData calls GetRelayBackendLiveDataFunc.
func (mock *MatrixStoreMock) GetRelayBackendLiveData(address []string) ([]RelayBackendLiveData, error) {
	if mock.GetRelayBackendLiveDataFunc == nil {
		panic("MatrixStoreMock.GetRelayBackendLiveDataFunc: method is nil but MatrixStore.GetRelayBackendLiveData was just called")
	}
	callInfo := struct {
		Address []string
	}{
		Address: address,
	}
	lockMatrixStoreMockGetRelayBackendLiveData.Lock()
	mock.calls.GetRelayBackendLiveData = append(mock.calls.GetRelayBackendLiveData, callInfo)
	lockMatrixStoreMockGetRelayBackendLiveData.Unlock()
	return mock.GetRelayBackendLiveDataFunc(address)
}

// GetRelayBackendLiveDataCalls gets all the calls that were made to GetRelayBackendLiveData.
// Check the length with:
//     len(mockedMatrixStore.GetRelayBackendLiveDataCalls())
func (mock *MatrixStoreMock) GetRelayBackendLiveDataCalls() []struct {
	Address []string
} {
	var calls []struct {
		Address []string
	}
	lockMatrixStoreMockGetRelayBackendLiveData.RLock()
	calls = mock.calls.GetRelayBackendLiveData
	lockMatrixStoreMockGetRelayBackendLiveData.RUnlock()
	return calls
}

// GetRelayBackendMaster calls GetRelayBackendMasterFunc.
func (mock *MatrixStoreMock) GetRelayBackendMaster() (RelayBackendLiveData, error) {
	if mock.GetRelayBackendMasterFunc == nil {
		panic("MatrixStoreMock.GetRelayBackendMasterFunc: method is nil but MatrixStore.GetRelayBackendMaster was just called")
	}
	callInfo := struct {
	}{}
	lockMatrixStoreMockGetRelayBackendMaster.Lock()
	mock.calls.GetRelayBackendMaster = append(mock.calls.GetRelayBackendMaster, callInfo)
	lockMatrixStoreMockGetRelayBackendMaster.Unlock()
	return mock.GetRelayBackendMasterFunc()
}

// GetRelayBackendMasterCalls gets all the calls that were made to GetRelayBackendMaster.
// Check the length with:
//     len(mockedMatrixStore.GetRelayBackendMasterCalls())
func (mock *MatrixStoreMock) GetRelayBackendMasterCalls() []struct {
} {
	var calls []struct {
	}
	lockMatrixStoreMockGetRelayBackendMaster.RLock()
	calls = mock.calls.GetRelayBackendMaster
	lockMatrixStoreMockGetRelayBackendMaster.RUnlock()
	return calls
}

// SetRelayBackendLiveData calls SetRelayBackendLiveDataFunc.
func (mock *MatrixStoreMock) SetRelayBackendLiveData(data RelayBackendLiveData) error {
	if mock.SetRelayBackendLiveDataFunc == nil {
		panic("MatrixStoreMock.SetRelayBackendLiveDataFunc: method is nil but MatrixStore.SetRelayBackendLiveData was just called")
	}
	callInfo := struct {
		Data RelayBackendLiveData
	}{
		Data: data,
	}
	lockMatrixStoreMockSetRelayBackendLiveData.Lock()
	mock.calls.SetRelayBackendLiveData = append(mock.calls.SetRelayBackendLiveData, callInfo)
	lockMatrixStoreMockSetRelayBackendLiveData.Unlock()
	return mock.SetRelayBackendLiveDataFunc(data)
}

// SetRelayBackendLiveDataCalls gets all the calls that were made to SetRelayBackendLiveData.
// Check the length with:
//     len(mockedMatrixStore.SetRelayBackendLiveDataCalls())
func (mock *MatrixStoreMock) SetRelayBackendLiveDataCalls() []struct {
	Data RelayBackendLiveData
} {
	var calls []struct {
		Data RelayBackendLiveData
	}
	lockMatrixStoreMockSetRelayBackendLiveData.RLock()
	calls = mock.calls.SetRelayBackendLiveData
	lockMatrixStoreMockSetRelayBackendLiveData.RUnlock()
	return calls
}

// SetRelayBackendMaster calls SetRelayBackendMasterFunc.
func (mock *MatrixStoreMock) SetRelayBackendMaster(in1 RelayBackendLiveData) error {
	if mock.SetRelayBackendMasterFunc == nil {
		panic("MatrixStoreMock.SetRelayBackendMasterFunc: method is nil but MatrixStore.SetRelayBackendMaster was just called")
	}
	callInfo := struct {
		In1 RelayBackendLiveData
	}{
		In1: in1,
	}
	lockMatrixStoreMockSetRelayBackendMaster.Lock()
	mock.calls.SetRelayBackendMaster = append(mock.calls.SetRelayBackendMaster, callInfo)
	lockMatrixStoreMockSetRelayBackendMaster.Unlock()
	return mock.SetRelayBackendMasterFunc(in1)
}

// SetRelayBackendMasterCalls gets all the calls that were made to SetRelayBackendMaster.
// Check the length with:
//     len(mockedMatrixStore.SetRelayBackendMasterCalls())
func (mock *MatrixStoreMock) SetRelayBackendMasterCalls() []struct {
	In1 RelayBackendLiveData
} {
	var calls []struct {
		In1 RelayBackendLiveData
	}
	lockMatrixStoreMockSetRelayBackendMaster.RLock()
	calls = mock.calls.SetRelayBackendMaster
	lockMatrixStoreMockSetRelayBackendMaster.RUnlock()
	return calls
}

// UpdateLiveMatrix calls UpdateLiveMatrixFunc.
func (mock *MatrixStoreMock) UpdateLiveMatrix(matrixData []byte, matrixType string) error {
	if mock.UpdateLiveMatrixFunc == nil {
		panic("MatrixStoreMock.UpdateLiveMatrixFunc: method is nil but MatrixStore.UpdateLiveMatrix was just called")
	}
	callInfo := struct {
		MatrixData []byte
		MatrixType string
	}{
		MatrixData: matrixData,
		MatrixType: matrixType,
	}
	lockMatrixStoreMockUpdateLiveMatrix.Lock()
	mock.calls.UpdateLiveMatrix = append(mock.calls.UpdateLiveMatrix, callInfo)
	lockMatrixStoreMockUpdateLiveMatrix.Unlock()
	return mock.UpdateLiveMatrixFunc(matrixData, matrixType)
}

// UpdateLiveMatrixCalls gets all the calls that were made to UpdateLiveMatrix.
// Check the length with:
//     len(mockedMatrixStore.UpdateLiveMatrixCalls())
func (mock *MatrixStoreMock) UpdateLiveMatrixCalls() []struct {
	MatrixData []byte
	MatrixType string
} {
	var calls []struct {
		MatrixData []byte
		MatrixType string
	}
	lockMatrixStoreMockUpdateLiveMatrix.RLock()
	calls = mock.calls.UpdateLiveMatrix
	lockMatrixStoreMockUpdateLiveMatrix.RUnlock()
	return calls
}

// UpdateMatrixSvc calls UpdateMatrixSvcFunc.
func (mock *MatrixStoreMock) UpdateMatrixSvc(matrixSvcData MatrixSvcData) error {
	if mock.UpdateMatrixSvcFunc == nil {
		panic("MatrixStoreMock.UpdateMatrixSvcFunc: method is nil but MatrixStore.UpdateMatrixSvc was just called")
	}
	callInfo := struct {
		MatrixSvcData MatrixSvcData
	}{
		MatrixSvcData: matrixSvcData,
	}
	lockMatrixStoreMockUpdateMatrixSvc.Lock()
	mock.calls.UpdateMatrixSvc = append(mock.calls.UpdateMatrixSvc, callInfo)
	lockMatrixStoreMockUpdateMatrixSvc.Unlock()
	return mock.UpdateMatrixSvcFunc(matrixSvcData)
}

// UpdateMatrixSvcCalls gets all the calls that were made to UpdateMatrixSvc.
// Check the length with:
//     len(mockedMatrixStore.UpdateMatrixSvcCalls())
func (mock *MatrixStoreMock) UpdateMatrixSvcCalls() []struct {
	MatrixSvcData MatrixSvcData
} {
	var calls []struct {
		MatrixSvcData MatrixSvcData
	}
	lockMatrixStoreMockUpdateMatrixSvc.RLock()
	calls = mock.calls.UpdateMatrixSvc
	lockMatrixStoreMockUpdateMatrixSvc.RUnlock()
	return calls
}

// UpdateMatrixSvcMaster calls UpdateMatrixSvcMasterFunc.
func (mock *MatrixStoreMock) UpdateMatrixSvcMaster(id uint64) error {
	if mock.UpdateMatrixSvcMasterFunc == nil {
		panic("MatrixStoreMock.UpdateMatrixSvcMasterFunc: method is nil but MatrixStore.UpdateMatrixSvcMaster was just called")
	}
	callInfo := struct {
		ID uint64
	}{
		ID: id,
	}
	lockMatrixStoreMockUpdateMatrixSvcMaster.Lock()
	mock.calls.UpdateMatrixSvcMaster = append(mock.calls.UpdateMatrixSvcMaster, callInfo)
	lockMatrixStoreMockUpdateMatrixSvcMaster.Unlock()
	return mock.UpdateMatrixSvcMasterFunc(id)
}

// UpdateMatrixSvcMasterCalls gets all the calls that were made to UpdateMatrixSvcMaster.
// Check the length with:
//     len(mockedMatrixStore.UpdateMatrixSvcMasterCalls())
func (mock *MatrixStoreMock) UpdateMatrixSvcMasterCalls() []struct {
	ID uint64
} {
	var calls []struct {
		ID uint64
	}
	lockMatrixStoreMockUpdateMatrixSvcMaster.RLock()
	calls = mock.calls.UpdateMatrixSvcMaster
	lockMatrixStoreMockUpdateMatrixSvcMaster.RUnlock()
	return calls
}

// UpdateOptimizerMaster calls UpdateOptimizerMasterFunc.
func (mock *MatrixStoreMock) UpdateOptimizerMaster(id uint64) error {
	if mock.UpdateOptimizerMasterFunc == nil {
		panic("MatrixStoreMock.UpdateOptimizerMasterFunc: method is nil but MatrixStore.UpdateOptimizerMaster was just called")
	}
	callInfo := struct {
		ID uint64
	}{
		ID: id,
	}
	lockMatrixStoreMockUpdateOptimizerMaster.Lock()
	mock.calls.UpdateOptimizerMaster = append(mock.calls.UpdateOptimizerMaster, callInfo)
	lockMatrixStoreMockUpdateOptimizerMaster.Unlock()
	return mock.UpdateOptimizerMasterFunc(id)
}

// UpdateOptimizerMasterCalls gets all the calls that were made to UpdateOptimizerMaster.
// Check the length with:
//     len(mockedMatrixStore.UpdateOptimizerMasterCalls())
func (mock *MatrixStoreMock) UpdateOptimizerMasterCalls() []struct {
	ID uint64
} {
	var calls []struct {
		ID uint64
	}
	lockMatrixStoreMockUpdateOptimizerMaster.RLock()
	calls = mock.calls.UpdateOptimizerMaster
	lockMatrixStoreMockUpdateOptimizerMaster.RUnlock()
	return calls
}

// UpdateOptimizerMatrix calls UpdateOptimizerMatrixFunc.
func (mock *MatrixStoreMock) UpdateOptimizerMatrix(matrix Matrix) error {
	if mock.UpdateOptimizerMatrixFunc == nil {
		panic("MatrixStoreMock.UpdateOptimizerMatrixFunc: method is nil but MatrixStore.UpdateOptimizerMatrix was just called")
	}
	callInfo := struct {
		Matrix Matrix
	}{
		Matrix: matrix,
	}
	lockMatrixStoreMockUpdateOptimizerMatrix.Lock()
	mock.calls.UpdateOptimizerMatrix = append(mock.calls.UpdateOptimizerMatrix, callInfo)
	lockMatrixStoreMockUpdateOptimizerMatrix.Unlock()
	return mock.UpdateOptimizerMatrixFunc(matrix)
}

// UpdateOptimizerMatrixCalls gets all the calls that were made to UpdateOptimizerMatrix.
// Check the length with:
//     len(mockedMatrixStore.UpdateOptimizerMatrixCalls())
func (mock *MatrixStoreMock) UpdateOptimizerMatrixCalls() []struct {
	Matrix Matrix
} {
	var calls []struct {
		Matrix Matrix
	}
	lockMatrixStoreMockUpdateOptimizerMatrix.RLock()
	calls = mock.calls.UpdateOptimizerMatrix
	lockMatrixStoreMockUpdateOptimizerMatrix.RUnlock()
	return calls
}
