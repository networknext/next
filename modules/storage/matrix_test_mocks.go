// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package storage

import (
	"sync"
)

var (
	lockMatrixStoreMockGetRelayBackendLiveData sync.RWMutex
	lockMatrixStoreMockSetRelayBackendLiveData sync.RWMutex
)

// Ensure, that MatrixStoreMock does implement MatrixStore.
// If this is not the case, regenerate this file with moq.
var _ MatrixStore = &MatrixStoreMock{}

// MatrixStoreMock is a mock implementation of MatrixStore.
//
//     func TestSomethingThatUsesMatrixStore(t *testing.T) {
//
//         // make and configure a mocked MatrixStore
//         mockedMatrixStore := &MatrixStoreMock{
//             GetRelayBackendLiveDataFunc: func() ([]RelayBackendLiveData, error) {
// 	               panic("mock out the GetRelayBackendLiveData method")
//             },
//             SetRelayBackendLiveDataFunc: func(data RelayBackendLiveData) error {
// 	               panic("mock out the SetRelayBackendLiveData method")
//             },
//         }
//
//         // use mockedMatrixStore in code that requires MatrixStore
//         // and then make assertions.
//
//     }
type MatrixStoreMock struct {
	// GetRelayBackendLiveDataFunc mocks the GetRelayBackendLiveData method.
	GetRelayBackendLiveDataFunc func() ([]RelayBackendLiveData, error)

	// SetRelayBackendLiveDataFunc mocks the SetRelayBackendLiveData method.
	SetRelayBackendLiveDataFunc func(data RelayBackendLiveData) error

	// calls tracks calls to the methods.
	calls struct {
		// GetRelayBackendLiveData holds details about calls to the GetRelayBackendLiveData method.
		GetRelayBackendLiveData []struct {
		}
		// SetRelayBackendLiveData holds details about calls to the SetRelayBackendLiveData method.
		SetRelayBackendLiveData []struct {
			// Data is the data argument value.
			Data RelayBackendLiveData
		}
	}
}

// GetRelayBackendLiveData calls GetRelayBackendLiveDataFunc.
func (mock *MatrixStoreMock) GetRelayBackendLiveData() ([]RelayBackendLiveData, error) {
	if mock.GetRelayBackendLiveDataFunc == nil {
		panic("MatrixStoreMock.GetRelayBackendLiveDataFunc: method is nil but MatrixStore.GetRelayBackendLiveData was just called")
	}
	callInfo := struct {
	}{}
	lockMatrixStoreMockGetRelayBackendLiveData.Lock()
	mock.calls.GetRelayBackendLiveData = append(mock.calls.GetRelayBackendLiveData, callInfo)
	lockMatrixStoreMockGetRelayBackendLiveData.Unlock()
	return mock.GetRelayBackendLiveDataFunc()
}

// GetRelayBackendLiveDataCalls gets all the calls that were made to GetRelayBackendLiveData.
// Check the length with:
//     len(mockedMatrixStore.GetRelayBackendLiveDataCalls())
func (mock *MatrixStoreMock) GetRelayBackendLiveDataCalls() []struct {
} {
	var calls []struct {
	}
	lockMatrixStoreMockGetRelayBackendLiveData.RLock()
	calls = mock.calls.GetRelayBackendLiveData
	lockMatrixStoreMockGetRelayBackendLiveData.RUnlock()
	return calls
}

// SetRelayBackendLiveData calls SetRelayBackendLiveDataFunc.
func (mock *MatrixStoreMock) SetRelayBackendLiveData(data RelayBackendLiveData) error {
	if mock.SetRelayBackendLiveDataFunc == nil {
		panic("MatrixStoreMock.SetRelayBackendLiveDataFunc: method is nil but MatrixStore.SetRelayBackendLiveData was just called")
	}
	callInfo := struct {
		Data RelayBackendLiveData
	}{
		Data: data,
	}
	lockMatrixStoreMockSetRelayBackendLiveData.Lock()
	mock.calls.SetRelayBackendLiveData = append(mock.calls.SetRelayBackendLiveData, callInfo)
	lockMatrixStoreMockSetRelayBackendLiveData.Unlock()
	return mock.SetRelayBackendLiveDataFunc(data)
}

// SetRelayBackendLiveDataCalls gets all the calls that were made to SetRelayBackendLiveData.
// Check the length with:
//     len(mockedMatrixStore.SetRelayBackendLiveDataCalls())
func (mock *MatrixStoreMock) SetRelayBackendLiveDataCalls() []struct {
	Data RelayBackendLiveData
} {
	var calls []struct {
		Data RelayBackendLiveData
	}
	lockMatrixStoreMockSetRelayBackendLiveData.RLock()
	calls = mock.calls.SetRelayBackendLiveData
	lockMatrixStoreMockSetRelayBackendLiveData.RUnlock()
	return calls
}
