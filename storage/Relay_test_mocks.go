// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package storage

import (
	"sync"
)

var (
	lockRelayStoreMockDelete      sync.RWMutex
	lockRelayStoreMockExpireReset sync.RWMutex
	lockRelayStoreMockGet         sync.RWMutex
	lockRelayStoreMockGetAll      sync.RWMutex
	lockRelayStoreMockSet         sync.RWMutex
)

// Ensure, that RelayStoreMock does implement RelayStore.
// If this is not the case, regenerate this file with moq.
var _ RelayStore = &RelayStoreMock{}

// RelayStoreMock is a mock implementation of RelayStore.
//
//     func TestSomethingThatUsesRelayStore(t *testing.T) {
//
//         // make and configure a mocked RelayStore
//         mockedRelayStore := &RelayStoreMock{
//             DeleteFunc: func(relayID string) error {
// 	               panic("mock out the Delete method")
//             },
//             ExpireResetFunc: func(relayID string) error {
// 	               panic("mock out the ExpireReset method")
//             },
//             GetFunc: func(relayID string) (*RelayStoreData, error) {
// 	               panic("mock out the Get method")
//             },
//             GetAllFunc: func() ([]*RelayStoreData, error) {
// 	               panic("mock out the GetAll method")
//             },
//             SetFunc: func(in1 RelayStoreData) error {
// 	               panic("mock out the Set method")
//             },
//         }
//
//         // use mockedRelayStore in code that requires RelayStore
//         // and then make assertions.
//
//     }
type RelayStoreMock struct {
	// DeleteFunc mocks the Delete method.
	DeleteFunc func(relayID string) error

	// ExpireResetFunc mocks the ExpireReset method.
	ExpireResetFunc func(relayID string) error

	// GetFunc mocks the Get method.
	GetFunc func(relayID string) (*RelayStoreData, error)

	// GetAllFunc mocks the GetAll method.
	GetAllFunc func() ([]*RelayStoreData, error)

	// SetFunc mocks the Set method.
	SetFunc func(in1 RelayStoreData) error

	// calls tracks calls to the methods.
	calls struct {
		// Delete holds details about calls to the Delete method.
		Delete []struct {
			// RelayID is the relayID argument value.
			RelayID string
		}
		// ExpireReset holds details about calls to the ExpireReset method.
		ExpireReset []struct {
			// RelayID is the relayID argument value.
			RelayID string
		}
		// Get holds details about calls to the Get method.
		Get []struct {
			// RelayID is the relayID argument value.
			RelayID string
		}
		// GetAll holds details about calls to the GetAll method.
		GetAll []struct {
		}
		// Set holds details about calls to the Set method.
		Set []struct {
			// In1 is the in1 argument value.
			In1 RelayStoreData
		}
	}
}

// Delete calls DeleteFunc.
func (mock *RelayStoreMock) Delete(relayID string) error {
	if mock.DeleteFunc == nil {
		panic("RelayStoreMock.DeleteFunc: method is nil but RelayStore.Delete was just called")
	}
	callInfo := struct {
		RelayID string
	}{
		RelayID: relayID,
	}
	lockRelayStoreMockDelete.Lock()
	mock.calls.Delete = append(mock.calls.Delete, callInfo)
	lockRelayStoreMockDelete.Unlock()
	return mock.DeleteFunc(relayID)
}

// DeleteCalls gets all the calls that were made to Delete.
// Check the length with:
//     len(mockedRelayStore.DeleteCalls())
func (mock *RelayStoreMock) DeleteCalls() []struct {
	RelayID string
} {
	var calls []struct {
		RelayID string
	}
	lockRelayStoreMockDelete.RLock()
	calls = mock.calls.Delete
	lockRelayStoreMockDelete.RUnlock()
	return calls
}

// ExpireReset calls ExpireResetFunc.
func (mock *RelayStoreMock) ExpireReset(relayID string) error {
	if mock.ExpireResetFunc == nil {
		panic("RelayStoreMock.ExpireResetFunc: method is nil but RelayStore.ExpireReset was just called")
	}
	callInfo := struct {
		RelayID string
	}{
		RelayID: relayID,
	}
	lockRelayStoreMockExpireReset.Lock()
	mock.calls.ExpireReset = append(mock.calls.ExpireReset, callInfo)
	lockRelayStoreMockExpireReset.Unlock()
	return mock.ExpireResetFunc(relayID)
}

// ExpireResetCalls gets all the calls that were made to ExpireReset.
// Check the length with:
//     len(mockedRelayStore.ExpireResetCalls())
func (mock *RelayStoreMock) ExpireResetCalls() []struct {
	RelayID string
} {
	var calls []struct {
		RelayID string
	}
	lockRelayStoreMockExpireReset.RLock()
	calls = mock.calls.ExpireReset
	lockRelayStoreMockExpireReset.RUnlock()
	return calls
}

// Get calls GetFunc.
func (mock *RelayStoreMock) Get(relayID string) (*RelayStoreData, error) {
	if mock.GetFunc == nil {
		panic("RelayStoreMock.GetFunc: method is nil but RelayStore.Get was just called")
	}
	callInfo := struct {
		RelayID string
	}{
		RelayID: relayID,
	}
	lockRelayStoreMockGet.Lock()
	mock.calls.Get = append(mock.calls.Get, callInfo)
	lockRelayStoreMockGet.Unlock()
	return mock.GetFunc(relayID)
}

// GetCalls gets all the calls that were made to Get.
// Check the length with:
//     len(mockedRelayStore.GetCalls())
func (mock *RelayStoreMock) GetCalls() []struct {
	RelayID string
} {
	var calls []struct {
		RelayID string
	}
	lockRelayStoreMockGet.RLock()
	calls = mock.calls.Get
	lockRelayStoreMockGet.RUnlock()
	return calls
}

// GetAll calls GetAllFunc.
func (mock *RelayStoreMock) GetAll() ([]*RelayStoreData, error) {
	if mock.GetAllFunc == nil {
		panic("RelayStoreMock.GetAllFunc: method is nil but RelayStore.GetAll was just called")
	}
	callInfo := struct {
	}{}
	lockRelayStoreMockGetAll.Lock()
	mock.calls.GetAll = append(mock.calls.GetAll, callInfo)
	lockRelayStoreMockGetAll.Unlock()
	return mock.GetAllFunc()
}

// GetAllCalls gets all the calls that were made to GetAll.
// Check the length with:
//     len(mockedRelayStore.GetAllCalls())
func (mock *RelayStoreMock) GetAllCalls() []struct {
} {
	var calls []struct {
	}
	lockRelayStoreMockGetAll.RLock()
	calls = mock.calls.GetAll
	lockRelayStoreMockGetAll.RUnlock()
	return calls
}

// Set calls SetFunc.
func (mock *RelayStoreMock) Set(in1 RelayStoreData) error {
	if mock.SetFunc == nil {
		panic("RelayStoreMock.SetFunc: method is nil but RelayStore.Set was just called")
	}
	callInfo := struct {
		In1 RelayStoreData
	}{
		In1: in1,
	}
	lockRelayStoreMockSet.Lock()
	mock.calls.Set = append(mock.calls.Set, callInfo)
	lockRelayStoreMockSet.Unlock()
	return mock.SetFunc(in1)
}

// SetCalls gets all the calls that were made to Set.
// Check the length with:
//     len(mockedRelayStore.SetCalls())
func (mock *RelayStoreMock) SetCalls() []struct {
	In1 RelayStoreData
} {
	var calls []struct {
		In1 RelayStoreData
	}
	lockRelayStoreMockSet.RLock()
	calls = mock.calls.Set
	lockRelayStoreMockSet.RUnlock()
	return calls
}
