// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package storage

import (
	"sync"
)

var (
	lockMatrixStoreMockGetMatrices           sync.RWMutex
	lockMatrixStoreMockGetMatrix             sync.RWMutex
	lockMatrixStoreMockGetMatrixSvcs         sync.RWMutex
	lockMatrixStoreMockStoreMatrix           sync.RWMutex
	lockMatrixStoreMockUpdateLiveMatrix      sync.RWMutex
	lockMatrixStoreMockUpdateMatrixSvc       sync.RWMutex
	lockMatrixStoreMockUpdateMatrixSvcMaster sync.RWMutex
	lockMatrixStoreMockUpdateOptimizerMaster sync.RWMutex
)

// Ensure, that MatrixStoreMock does implement MatrixStore.
// If this is not the case, regenerate this file with moq.
var _ MatrixStore = &MatrixStoreMock{}

// MatrixStoreMock is a mock implementation of MatrixStore.
//
//     func TestSomethingThatUsesMatrixStore(t *testing.T) {
//
//         // make and configure a mocked MatrixStore
//         mockedMatrixStore := &MatrixStoreMock{
//             GetMatricesFunc: func() ([]Matrix, uint64, error) {
// 	               panic("mock out the GetMatrices method")
//             },
//             GetMatrixFunc: func() ([]byte, error) {
// 	               panic("mock out the GetMatrix method")
//             },
//             GetMatrixSvcsFunc: func() ([]MatrixSvcData, uint64, error) {
// 	               panic("mock out the GetMatrixSvcs method")
//             },
//             StoreMatrixFunc: func(matrix Matrix) error {
// 	               panic("mock out the StoreMatrix method")
//             },
//             UpdateLiveMatrixFunc: func(matrixData []byte) error {
// 	               panic("mock out the UpdateLiveMatrix method")
//             },
//             UpdateMatrixSvcFunc: func(matrixSvcData MatrixSvcData) error {
// 	               panic("mock out the UpdateMatrixSvc method")
//             },
//             UpdateMatrixSvcMasterFunc: func(id uint64) error {
// 	               panic("mock out the UpdateMatrixSvcMaster method")
//             },
//             UpdateOptimizerMasterFunc: func(id uint64) error {
// 	               panic("mock out the UpdateOptimizerMaster method")
//             },
//         }
//
//         // use mockedMatrixStore in code that requires MatrixStore
//         // and then make assertions.
//
//     }
type MatrixStoreMock struct {
	// GetMatricesFunc mocks the GetMatrices method.
	GetMatricesFunc func() ([]Matrix, uint64, error)

	// GetMatrixFunc mocks the GetMatrix method.
	GetMatrixFunc func() ([]byte, error)

	// GetMatrixSvcsFunc mocks the GetMatrixSvcs method.
	GetMatrixSvcsFunc func() ([]MatrixSvcData, uint64, error)

	// StoreMatrixFunc mocks the StoreMatrix method.
	StoreMatrixFunc func(matrix Matrix) error

	// UpdateLiveMatrixFunc mocks the UpdateLiveMatrix method.
	UpdateLiveMatrixFunc func(matrixData []byte) error

	// UpdateMatrixSvcFunc mocks the UpdateMatrixSvc method.
	UpdateMatrixSvcFunc func(matrixSvcData MatrixSvcData) error

	// UpdateMatrixSvcMasterFunc mocks the UpdateMatrixSvcMaster method.
	UpdateMatrixSvcMasterFunc func(id uint64) error

	// UpdateOptimizerMasterFunc mocks the UpdateOptimizerMaster method.
	UpdateOptimizerMasterFunc func(id uint64) error

	// calls tracks calls to the methods.
	calls struct {
		// GetMatrices holds details about calls to the GetMatrices method.
		GetMatrices []struct {
		}
		// GetMatrix holds details about calls to the GetMatrix method.
		GetMatrix []struct {
		}
		// GetMatrixSvcs holds details about calls to the GetMatrixSvcs method.
		GetMatrixSvcs []struct {
		}
		// StoreMatrix holds details about calls to the StoreMatrix method.
		StoreMatrix []struct {
			// Matrix is the matrix argument value.
			Matrix Matrix
		}
		// UpdateLiveMatrix holds details about calls to the UpdateLiveMatrix method.
		UpdateLiveMatrix []struct {
			// MatrixData is the matrixData argument value.
			MatrixData []byte
		}
		// UpdateMatrixSvc holds details about calls to the UpdateMatrixSvc method.
		UpdateMatrixSvc []struct {
			// MatrixSvcData is the matrixSvcData argument value.
			MatrixSvcData MatrixSvcData
		}
		// UpdateMatrixSvcMaster holds details about calls to the UpdateMatrixSvcMaster method.
		UpdateMatrixSvcMaster []struct {
			// ID is the id argument value.
			ID uint64
		}
		// UpdateOptimizerMaster holds details about calls to the UpdateOptimizerMaster method.
		UpdateOptimizerMaster []struct {
			// ID is the id argument value.
			ID uint64
		}
	}
}

// GetMatrices calls GetMatricesFunc.
func (mock *MatrixStoreMock) GetMatrices() ([]Matrix, uint64, error) {
	if mock.GetMatricesFunc == nil {
		panic("MatrixStoreMock.GetMatricesFunc: method is nil but MatrixStore.GetMatrices was just called")
	}
	callInfo := struct {
	}{}
	lockMatrixStoreMockGetMatrices.Lock()
	mock.calls.GetMatrices = append(mock.calls.GetMatrices, callInfo)
	lockMatrixStoreMockGetMatrices.Unlock()
	return mock.GetMatricesFunc()
}

// GetMatricesCalls gets all the calls that were made to GetMatrices.
// Check the length with:
//     len(mockedMatrixStore.GetMatricesCalls())
func (mock *MatrixStoreMock) GetMatricesCalls() []struct {
} {
	var calls []struct {
	}
	lockMatrixStoreMockGetMatrices.RLock()
	calls = mock.calls.GetMatrices
	lockMatrixStoreMockGetMatrices.RUnlock()
	return calls
}

// GetMatrix calls GetMatrixFunc.
func (mock *MatrixStoreMock) GetMatrix() ([]byte, error) {
	if mock.GetMatrixFunc == nil {
		panic("MatrixStoreMock.GetMatrixFunc: method is nil but MatrixStore.GetMatrix was just called")
	}
	callInfo := struct {
	}{}
	lockMatrixStoreMockGetMatrix.Lock()
	mock.calls.GetMatrix = append(mock.calls.GetMatrix, callInfo)
	lockMatrixStoreMockGetMatrix.Unlock()
	return mock.GetMatrixFunc()
}

// GetMatrixCalls gets all the calls that were made to GetMatrix.
// Check the length with:
//     len(mockedMatrixStore.GetMatrixCalls())
func (mock *MatrixStoreMock) GetMatrixCalls() []struct {
} {
	var calls []struct {
	}
	lockMatrixStoreMockGetMatrix.RLock()
	calls = mock.calls.GetMatrix
	lockMatrixStoreMockGetMatrix.RUnlock()
	return calls
}

// GetMatrixSvcs calls GetMatrixSvcsFunc.
func (mock *MatrixStoreMock) GetMatrixSvcs() ([]MatrixSvcData, uint64, error) {
	if mock.GetMatrixSvcsFunc == nil {
		panic("MatrixStoreMock.GetMatrixSvcsFunc: method is nil but MatrixStore.GetMatrixSvcs was just called")
	}
	callInfo := struct {
	}{}
	lockMatrixStoreMockGetMatrixSvcs.Lock()
	mock.calls.GetMatrixSvcs = append(mock.calls.GetMatrixSvcs, callInfo)
	lockMatrixStoreMockGetMatrixSvcs.Unlock()
	return mock.GetMatrixSvcsFunc()
}

// GetMatrixSvcsCalls gets all the calls that were made to GetMatrixSvcs.
// Check the length with:
//     len(mockedMatrixStore.GetMatrixSvcsCalls())
func (mock *MatrixStoreMock) GetMatrixSvcsCalls() []struct {
} {
	var calls []struct {
	}
	lockMatrixStoreMockGetMatrixSvcs.RLock()
	calls = mock.calls.GetMatrixSvcs
	lockMatrixStoreMockGetMatrixSvcs.RUnlock()
	return calls
}

// StoreMatrix calls StoreMatrixFunc.
func (mock *MatrixStoreMock) StoreMatrix(matrix Matrix) error {
	if mock.StoreMatrixFunc == nil {
		panic("MatrixStoreMock.StoreMatrixFunc: method is nil but MatrixStore.StoreMatrix was just called")
	}
	callInfo := struct {
		Matrix Matrix
	}{
		Matrix: matrix,
	}
	lockMatrixStoreMockStoreMatrix.Lock()
	mock.calls.StoreMatrix = append(mock.calls.StoreMatrix, callInfo)
	lockMatrixStoreMockStoreMatrix.Unlock()
	return mock.StoreMatrixFunc(matrix)
}

// StoreMatrixCalls gets all the calls that were made to StoreMatrix.
// Check the length with:
//     len(mockedMatrixStore.StoreMatrixCalls())
func (mock *MatrixStoreMock) StoreMatrixCalls() []struct {
	Matrix Matrix
} {
	var calls []struct {
		Matrix Matrix
	}
	lockMatrixStoreMockStoreMatrix.RLock()
	calls = mock.calls.StoreMatrix
	lockMatrixStoreMockStoreMatrix.RUnlock()
	return calls
}

// UpdateLiveMatrix calls UpdateLiveMatrixFunc.
func (mock *MatrixStoreMock) UpdateLiveMatrix(matrixData []byte) error {
	if mock.UpdateLiveMatrixFunc == nil {
		panic("MatrixStoreMock.UpdateLiveMatrixFunc: method is nil but MatrixStore.UpdateLiveMatrix was just called")
	}
	callInfo := struct {
		MatrixData []byte
	}{
		MatrixData: matrixData,
	}
	lockMatrixStoreMockUpdateLiveMatrix.Lock()
	mock.calls.UpdateLiveMatrix = append(mock.calls.UpdateLiveMatrix, callInfo)
	lockMatrixStoreMockUpdateLiveMatrix.Unlock()
	return mock.UpdateLiveMatrixFunc(matrixData)
}

// UpdateLiveMatrixCalls gets all the calls that were made to UpdateLiveMatrix.
// Check the length with:
//     len(mockedMatrixStore.UpdateLiveMatrixCalls())
func (mock *MatrixStoreMock) UpdateLiveMatrixCalls() []struct {
	MatrixData []byte
} {
	var calls []struct {
		MatrixData []byte
	}
	lockMatrixStoreMockUpdateLiveMatrix.RLock()
	calls = mock.calls.UpdateLiveMatrix
	lockMatrixStoreMockUpdateLiveMatrix.RUnlock()
	return calls
}

// UpdateMatrixSvc calls UpdateMatrixSvcFunc.
func (mock *MatrixStoreMock) UpdateMatrixSvc(matrixSvcData MatrixSvcData) error {
	if mock.UpdateMatrixSvcFunc == nil {
		panic("MatrixStoreMock.UpdateMatrixSvcFunc: method is nil but MatrixStore.UpdateMatrixSvc was just called")
	}
	callInfo := struct {
		MatrixSvcData MatrixSvcData
	}{
		MatrixSvcData: matrixSvcData,
	}
	lockMatrixStoreMockUpdateMatrixSvc.Lock()
	mock.calls.UpdateMatrixSvc = append(mock.calls.UpdateMatrixSvc, callInfo)
	lockMatrixStoreMockUpdateMatrixSvc.Unlock()
	return mock.UpdateMatrixSvcFunc(matrixSvcData)
}

// UpdateMatrixSvcCalls gets all the calls that were made to UpdateMatrixSvc.
// Check the length with:
//     len(mockedMatrixStore.UpdateMatrixSvcCalls())
func (mock *MatrixStoreMock) UpdateMatrixSvcCalls() []struct {
	MatrixSvcData MatrixSvcData
} {
	var calls []struct {
		MatrixSvcData MatrixSvcData
	}
	lockMatrixStoreMockUpdateMatrixSvc.RLock()
	calls = mock.calls.UpdateMatrixSvc
	lockMatrixStoreMockUpdateMatrixSvc.RUnlock()
	return calls
}

// UpdateMatrixSvcMaster calls UpdateMatrixSvcMasterFunc.
func (mock *MatrixStoreMock) UpdateMatrixSvcMaster(id uint64) error {
	if mock.UpdateMatrixSvcMasterFunc == nil {
		panic("MatrixStoreMock.UpdateMatrixSvcMasterFunc: method is nil but MatrixStore.UpdateMatrixSvcMaster was just called")
	}
	callInfo := struct {
		ID uint64
	}{
		ID: id,
	}
	lockMatrixStoreMockUpdateMatrixSvcMaster.Lock()
	mock.calls.UpdateMatrixSvcMaster = append(mock.calls.UpdateMatrixSvcMaster, callInfo)
	lockMatrixStoreMockUpdateMatrixSvcMaster.Unlock()
	return mock.UpdateMatrixSvcMasterFunc(id)
}

// UpdateMatrixSvcMasterCalls gets all the calls that were made to UpdateMatrixSvcMaster.
// Check the length with:
//     len(mockedMatrixStore.UpdateMatrixSvcMasterCalls())
func (mock *MatrixStoreMock) UpdateMatrixSvcMasterCalls() []struct {
	ID uint64
} {
	var calls []struct {
		ID uint64
	}
	lockMatrixStoreMockUpdateMatrixSvcMaster.RLock()
	calls = mock.calls.UpdateMatrixSvcMaster
	lockMatrixStoreMockUpdateMatrixSvcMaster.RUnlock()
	return calls
}

// UpdateOptimizerMaster calls UpdateOptimizerMasterFunc.
func (mock *MatrixStoreMock) UpdateOptimizerMaster(id uint64) error {
	if mock.UpdateOptimizerMasterFunc == nil {
		panic("MatrixStoreMock.UpdateOptimizerMasterFunc: method is nil but MatrixStore.UpdateOptimizerMaster was just called")
	}
	callInfo := struct {
		ID uint64
	}{
		ID: id,
	}
	lockMatrixStoreMockUpdateOptimizerMaster.Lock()
	mock.calls.UpdateOptimizerMaster = append(mock.calls.UpdateOptimizerMaster, callInfo)
	lockMatrixStoreMockUpdateOptimizerMaster.Unlock()
	return mock.UpdateOptimizerMasterFunc(id)
}

// UpdateOptimizerMasterCalls gets all the calls that were made to UpdateOptimizerMaster.
// Check the length with:
//     len(mockedMatrixStore.UpdateOptimizerMasterCalls())
func (mock *MatrixStoreMock) UpdateOptimizerMasterCalls() []struct {
	ID uint64
} {
	var calls []struct {
		ID uint64
	}
	lockMatrixStoreMockUpdateOptimizerMaster.RLock()
	calls = mock.calls.UpdateOptimizerMaster
	lockMatrixStoreMockUpdateOptimizerMaster.RUnlock()
	return calls
}
