// Code generated by oto; DO NOT EDIT.

package rpc

import (
	"context"
	"log"
	"net/http"

	"github.com/pacedotdev/oto/otohttp"

	routing "github.com/networknext/backend/routing"

	net "net"
)

type PortalService interface {
	Relays(context.Context, RelaysRequest) (*RelaysResponse, error)
}

type portalServiceServer struct {
	server        *otohttp.Server
	portalService PortalService
}

func RegisterPortalService(server *otohttp.Server, portalService PortalService) {
	handler := &portalServiceServer{
		server:        server,
		portalService: portalService,
	}
	server.Register("PortalService", "Relays", handler.handleRelays)
}

func (s *portalServiceServer) handleRelays(w http.ResponseWriter, r *http.Request) {
	var request RelaysRequest
	if err := otohttp.Decode(r, &request); err != nil {
		s.server.OnErr(w, r, err)
		return
	}
	response, err := s.portalService.Relays(r.Context(), request)
	if err != nil {
		log.Println("TODO: oto service error:", err)
		http.Error(w, err.Error(), http.StatusInternalServerError)
		return
	}
	if err := otohttp.Encode(w, r, http.StatusOK, response); err != nil {
		s.server.OnErr(w, r, err)
		return
	}
}

type RelaysRequest struct {
}

type UDPAddr struct {
	IP   net.IP `json:"iP"`
	Port int    `json:"port"`
	Zone string `json:"zone"`
}

type Seller struct {
	ID                string `json:"id"`
	Name              string `json:"name"`
	IngressPriceCents uint64 `json:"ingressPriceCents"`
	EgressPriceCents  uint64 `json:"egressPriceCents"`
}

type Datacenter struct {
	ID      uint64 `json:"id"`
	Name    string `json:"name"`
	Enabled bool   `json:"enabled"`
}

type Relay struct {
	ID             uint64             `json:"id"`
	Name           string             `json:"name"`
	Addr           net.UDPAddr        `json:"addr"`
	PublicKey      []byte             `json:"publicKey"`
	Seller         routing.Seller     `json:"seller"`
	Datacenter     routing.Datacenter `json:"datacenter"`
	Latitude       float64            `json:"latitude"`
	Longitude      float64            `json:"longitude"`
	LastUpdateTime uint64             `json:"lastUpdateTime"`
}

type RelaysResponse struct {
	Relays []routing.Relay `json:"relays"`
	Error  string          `json:"error,omitempty"`
}
